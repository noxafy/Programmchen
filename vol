#!/bin/bash

aimed_volume=
current_volume=
usage="Usage: \e[1m$(basename $0)\e[0m -h | -m [true|false] | [[+|-]\e[4mvolume\e[0m]"
help="Get or set the system output volume.
$usage
        \e[1m-h\e[0m	Displays this help message and exists.
        \e[1m-m\e[0m	Set muted state of audio output or just print out the current state.
        \e[4mvolume\e[0m	The value the output volume to set to (0-100). Sign with - or + for a relative change.
If no argument given, it prints the current volume.
"

case $1 in
-h)
  printf "$help"
  exit 0
  ;;
-m)
  if [[ $2 == "true" || $2 == "false" ]]; then
    osascript -e "Set volume output muted $2"
  else
    osascript -e 'output muted of (get volume settings)'
  fi
  exit 0
  ;;
esac

current_volume=$(osascript -e 'output volume of (get volume settings)')
#echo "current_volume: $current_volume"

case $1 in
[0-9]|[0-9][0-9])
  aimed_volume=$1
  ;;
-[0-9]|-[0-9][0-9])
  aimed_volume=$(echo "$current_volume$1" | bc)
  if [[ $(echo "$aimed_volume < 0" | bc) -eq 1 ]]; then
    aimed_volume=0
  fi
  ;;
+[0-9]|+[0-9][0-9])
  aimed_volume=$(echo "$current_volume$1" | bc)
  if [[ $(echo "$aimed_volume > 100" | bc) -eq 1 ]]; then
    aimed_volume=100
  fi
  ;;
-*)
  printf "Wrong argument: %s\n$usage -- See -h for more help.\n" "$1"
  exit 1
  ;;
"")
  printf "%d %%\n" $current_volume
  exit 0
  ;;
*)
  if [[ -z $aimed_volume && -n $1 ]]; then
    printf "Bad volume value: %s\n$usage -- See -h for more help.\n" "$1"
    exit 1
  fi
  ;;
esac

#echo "aimed_volume: $aimed_volume"
osascript -e "Set volume output volume $aimed_volume"
