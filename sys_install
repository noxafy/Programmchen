#!/bin/bash

thisdir=$(dirname "$PWD/$BASH_SOURCE")
if [[ ! -e $thisdir ]]; then
  thisdir=$(dirname "$BASH_SOURCE")
fi
usage="\e[1msys_install\e[0m -h | [-s]"
help="An install script for computer reset.
$usage
	\e[1m-h\e[0m	Displays this message and exists.
	\e[1m-s\e[0m	Skip brew installs, brew cask installs and mas installs.

Fast internet connection recommended.
Warning: Leave in place!
"

#prefs
skipauto=
def_ssid=
def_password=

#resources
trading_icon="$IT/trading212.icns" # icon for Trading212.app
dashboard="$thisdir/dashboard" # Dashboard widgets
# ~/Library
keylayouts="Keyboard Layouts" # keyboard layouts
dictionaries="Dictionaries"
# TODO
# adobe installer
# thunderbird folder
# intellij folder
# minecraft
# IdeaProjects Documents Pictures Music
# power point draft uniwue
# wifi data (save in pass?)

brews=(agedu
aspell
bash
bash-completion
bash-snippets
brightness
#bro
#chordii
#chromedriver
cloc
darksky-weather
diff-pdf
#expect
fd
#ffmpeg # required by audacity?
fortune
#geoipupdate
git
go
googler
hexedit
howdoi
lorem
#mas #already installed
maven
maven-completion
mplayer
#mujs
mysql
nativefier
#pass
pdfgrep
pick
pup
recode
shpotify
testdisk
textmate
wget
wiki
wine
winetricks
you-get
youtube-dl)

brewcasks=(android-file-transfer
android-sdk
android-studio
anki
axure-rp
betterzipql
calibre
disablemonitor
#dropbox #already installed
firefox
flux
freefilesync
freemind
geogebra
go2shell
google-chrome
google-earth-pro
intellij-idea
#iterm2
java
#jwzlyrics
mactex
mpv
notational-velocity
#osxfuse
qlimagesize
qlstephen
soundflower
spotify
telegram
texstudio
the-unarchiver
thunderbird
ukelele
xquartz)

masinstalls=(
### Free
890805912 # Newsflow
595191960 # CopyClip
526298438 # Lightshot Screenshot
404010395 # TextWrangler
1278508951 # Trello
1061963639 # VirtualDJ 8

### Apple
#497799835 # XCode, required by mas
408981434 # iMovie
409183694 # Keynote
409201541 # Pages
409203825 # Numbers

### paid
1247301872 # Logoist 3
634148309 # Logic Pro X
424389933 # Final Cut Pro
634159523 # MainStage 3
434290957 # Motion
424390742 # Compressor
)

########################################################################################################
##### Args parsing
########################################################################################################

case $1 in
  -h)
    printf "$help"
    exit 0
    ;;
  -s)
    skipauto=true
    ;;
  -*)
    printf "Wrong argument: %s\n$usage -- See -h for more help.\n" "$1"
    exit 1
    ;;
esac

########################################################################################################
##### Function declarations
########################################################################################################

die() {
  echo "ERROR: $*!" >&2
  exit 1
}

c() {
  if [[ $1 == "-s" ]]; then
    sudo=true
    shift
  else
    sudo=
  fi
  while [[ -n $1 ]]; do
    origin="$thisdir/$1"
    if [[ ! -e "$origin" ]]; then
      echo "WARNING: Requested file or dir not available: $origin"
      continue;
    fi
    target="$PWD/$1"
    if [[ -d "$target" && "$origin" == */ ]]; then
      printf "Copying contents of $origin to $target"
    else
      rm -f "$target" &> /dev/null
      printf "Copying whole folder $origin to $target"
    fi
    printf " ($(du -sh "$origin" | awk '{print $1}')) ...\n"
    if [[ -n $sudo ]]; then
      sudo cp -a "$origin" "$target" || die "Copying $origin to $target failed!"
    else
      cp -a "$origin" "$target" || die "Copying $origin to $target failed!"
    fi
    shift
  done
}

installWifi() {
  ssid=$1
  passwd=$2
  while [[ -z "$ssid" ]]; do
    echo "Available networks (WPA2 only):"
    networks=$(/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport -s)
    echo "$networks" | sed -n 1p
    echo "$networks" | grep "WPA2"
    read -p "Please enter a SSID to connect to (WPA2 only; s = search again all available): " ssid
    if [[ "$ssid" = s ]]; then
      ssid=
    fi
    if [[ -z $(echo "$networks"  | awk '{print $1}' | grep -- "^${ssid}\$") ]]; then
      echo "Network \"$ssid\" is not available."
      ssid=
    fi
  done
  if [[ -n $(networksetup -listpreferredwirelessnetworks en0 | grep -- "^[[:space:]]*${ssid}\$") ]]; then
    printf "%s already installed!\n" "$ssid"
    return;
  fi
  while [[ -z "$passwd" ]]; do
    read -p "Please enter the password for $ssid: " passwd
  done
  networksetup -addpreferredwirelessnetworkatindex Airport "$ssid" 0 WPA2 "$passwd"
}

waitUser() {
  if [[ -n "$*" ]]; then
    echo "$*"
    sleep 2
  fi
  read -p "Press [Enter] to continue: " trash
  #printf "\e[A\r\e[K"
}

tell() {
  echo "####################################################"
  echo "### $*"
  echo "####################################################"
}

########################################################################################################
##### Partly automatic part
########################################################################################################
# In this part, the script can do mostly on its own, but needs hands-on from time to time
tell "Partly automatic part"
echo

#go home first
pushd "$HOME" &> /dev/null || die "cd to $HOME failed!"

# check, if .bash_profile is installed
if [[ -z "$IT" ]]; then # $IT is required by script
  tell "Preferences installation"

  # install .bash_profile as root
  c -s .bash_profile
  # install the other shit
  c .m2/settings.xml .tm_properties .ssh .password-store .gnupg
  
  #install terminal layouts
  open "$thisdir/*.terminal"

  #keyboard layout
  pushd "$HOME/Library" &> /dev/null || die "cd to $HOME/Library failed!"
  c "$keylayouts/" # - keyboard layout

  # copy dictionaries
  c "$dictionaries/"
  popd &> /dev/null

  #defaults write com.apple.Siri StatusMenuVisible 0 #user siri in status bar as reminder of deactivating it

  #print all defaults, major unreadable values filtered out
  #defaults read | grep -v "AppleIDAgentMetaInfo" | grep -v "AppleIDAccount" | grep -v 'FZPersonPictureData' | grep -v 'pref:200:Machine Preferences' | grep -v 'FZPersonSmallPictureData' | grep -v 'FZPersonPictureData' | grep -v "iTunes Location" | grep -v 'ProcessViewerColumns' | grep -v '\\Ud83c' | grep -v 'FFNamingPresets' | grep -v 'FFMediaImportOrganizerFilmListView' | grep -v 'timeFormatLK' | grep -v 'FFShareDestinationsKey' | grep -v 'folderActions' | grep -v 'LibraryBookmark' | grep -v 'IPXDefaultLibraryURLBookmark' | grep -v 'IPXDefaultWorkspace' | grep -v 'Data =' | grep -v 'WebKitUserStyleSheetLocationPreferenceKey' | grep -v 'TTInspectorProcesses' | grep -v 'TextBoldColor' | grep -v 'BackgroundColor' | grep -v 'CursorColor' | grep -v 'SelectionColor' | grep -v 'TextColor' | grep -v 'book =' | grep -v 'DVTRecentColors' | grep -v CacheBag | grep -v 'file-bookmark' | grep -v 'TSWPInvisiblesColor' | grep -v 'FFMediaImportOrganizerFilmListView' | grep -v 'pref:130:Preferences' | grep -v 'eqps:129:EQPreset' | grep -v 'services =' | grep -v 'GarageBand' | grep -v 'weather =' | grep -v 'UserCrossfade' | grep -v 'BookmarkData' | grep -v 'kBookmarkDataKey' | grep -v 'FFShareDestinationsKey' | grep -v 'KeyBingingTable' | grep -v 'MacAppStoreReceiptData_11.0' | grep -v 'LoginItemsColumn2' | grep -v ' req = ' | grep -v 'LogicBinaryPreferences' | grep -v 'CachedBag'
  # parse output to command
  # sed 's/= //g;s/;//g;s/"/defaults -currentHost write -g /;s/"//'
  # sed 's/= //g;s/;//g;s/ *"*/defaults write /;s/"//'

  # trackpad prefs
  # "Apple Global Domain" = {
  echo "Mouse and Trackpad settings."
  defaults -currentHost write -g com.apple.mouse.tapBehavior 1
  defaults -currentHost write -g com.apple.trackpad.enableSecondaryClick 1
  defaults -currentHost write -g com.apple.trackpad.fiveFingerPinchSwipeGesture 2
  defaults -currentHost write -g com.apple.trackpad.fourFingerHorizSwipeGesture 2
  defaults -currentHost write -g com.apple.trackpad.fourFingerPinchSwipeGesture 2
  defaults -currentHost write -g com.apple.trackpad.fourFingerVertSwipeGesture 2
  defaults -currentHost write -g com.apple.trackpad.momentumScroll 1
  defaults -currentHost write -g com.apple.trackpad.pinchGesture 1
  defaults -currentHost write -g com.apple.trackpad.rotateGesture 1
  defaults -currentHost write -g com.apple.trackpad.scrollBehavior 2
  defaults -currentHost write -g com.apple.trackpad.threeFingerDragGesture 0
  defaults -currentHost write -g com.apple.trackpad.threeFingerHorizSwipeGesture 2
  defaults -currentHost write -g com.apple.trackpad.threeFingerTapGesture 2
  defaults -currentHost write -g com.apple.trackpad.threeFingerVertSwipeGesture 2
  defaults -currentHost write -g com.apple.trackpad.twoFingerDoubleTapGesture 1
  defaults -currentHost write -g com.apple.trackpad.twoFingerFromRightEdgeSwipeGesture 3
  defaults -currentHost write -g com.apple.trackpad.version 5
  # };

  echo "Dock settings."
  # "com.apple.dock" = {
  defaults write autohide 1
  defaults write largesize 55
  defaults write magnification 1
  defaults write minimize-to-application 1
  defaults write orientation left
  defaults write tilesize 42
  # }

  # Dictionary
  echo "Dictionary settings."
  defaults write com.apple.Dictionary "last available dictionaries" "(
    \"/System/Library/Frameworks/CoreServices.framework/Frameworks/DictionaryServices.framework/Resources/Wikipedia.wikipediadictionary\",
    \"~/Library/Containers/com.apple.Dictionary/Data/Library/Dictionaries/Deutsch-Englisch.dictionary\",
    \"~/Library/Containers/com.apple.Dictionary/Data/Library/Dictionaries/OpenThesaurus Deutsch.dictionary\",
    \"asset:/Oxford Dictionary of English.dictionary\",
    \"asset:/Traditional Chinese.dictionary\",
    \"asset:/The Standard Dictionary of Contemporary Chinese.dictionary\",
    \"asset:/Simplified Chinese - English.dictionary\",
    \"asset:/Danish.dictionary\",
    \"asset:/French.dictionary\",
    \"asset:/Hindi.dictionary\",
    \"asset:/Italian.dictionary\",
    \"asset:/Sanseido Super Daijirin.dictionary\",
    \"asset:/Sanseido The WISDOM English-Japanese Japanese-English Dictionary.dictionary\",
    \"asset:/Korean.dictionary\",
    \"asset:/Korean - English.dictionary\",
    \"asset:/Dutch.dictionary\",
    \"asset:/Dutch - English.dictionary\",
    \"asset:/Norwegian.dictionary\",
    \"asset:/Portuguese.dictionary\",
    \"asset:/Portuguese - English.dictionary\",
    \"asset:/Russian.dictionary\",
    \"asset:/Swedish.dictionary\",
    \"asset:/Spanish.dictionary\",
    \"asset:/Thai.dictionary\",
    \"asset:/Turkish.dictionary\",
    \"asset:/TTY Abbreviations Dictionary.dictionary\",
    \"/System/Library/Assets/com_apple_MobileAsset_DictionaryServices_dictionaryOSX/cd4d7cc1cd227a13d2b9c029f86c940f94b7543a.asset/AssetData/Apple Dictionary.dictionary\",
    \"/System/Library/Assets/com_apple_MobileAsset_DictionaryServices_dictionaryOSX/685cdc3ef70cf91c881f4c7c2e98c3f00ace218b.asset/AssetData/Oxford American Writer\'s Thesaurus.dictionary\",
    \"/System/Library/Assets/com_apple_MobileAsset_DictionaryServices_dictionaryOSX/975b56580ea4bbbe1d29ca14a3b5e1a81411c787.asset/AssetData/New Oxford American Dictionary.dictionary\",
    \"/System/Library/Assets/com_apple_MobileAsset_DictionaryServices_dictionaryOSX/2fcc349eb53d7c336b8372758b70508eb8e2ac0b.asset/AssetData/Oxford Thesaurus of English.dictionary\",
    \"asset:/Traditional Chinese - English.dictionary\",
    \"/System/Library/Assets/com_apple_MobileAsset_DictionaryServices_dictionaryOSX/59c252b96e44a6dbdc931e5b75a169f22eb6fa43.asset/AssetData/Duden Dictionary Data Set I.dictionary\",
    \"/System/Library/Assets/com_apple_MobileAsset_DictionaryServices_dictionaryOSX/2a679af89e5bb8b417ff02b0fef81ca39ffad9a5.asset/AssetData/German - English.dictionary\",
    \"/System/Library/Assets/com_apple_MobileAsset_DictionaryServices_dictionaryOSX/e5ccfe0082277d86bcac7e63268a21272f704c34.asset/AssetData/French - English.dictionary\",
    \"/System/Library/Assets/com_apple_MobileAsset_DictionaryServices_dictionaryOSX/d574b5371fbd293fe74c473f37a18fa300ecdc31.asset/AssetData/Italian - English.dictionary\",
    \"/System/Library/Assets/com_apple_MobileAsset_DictionaryServices_dictionaryOSX/60f594992693ff3f88af3f505da1451dc5af9c8c.asset/AssetData/Russian - English.dictionary\",
    \"/System/Library/Assets/com_apple_MobileAsset_DictionaryServices_dictionaryOSX/0c32ebe1de94a069aca537b10f718806c5ad50c1.asset/AssetData/Spanish - English.dictionary\"
  )"
  defaults write com.apple.DictionaryServices DCSActiveDictionaries '(
    "/System/Library/Frameworks/CoreServices.framework/Frameworks/DictionaryServices.framework/Resources/Wikipedia.wikipediadictionary",
    "~/Library/Containers/com.apple.Dictionary/Data/Library/Dictionaries/Deutsch-Englisch.dictionary",
    "~/Library/Containers/com.apple.Dictionary/Data/Library/Dictionaries/OpenThesaurus Deutsch.dictionary",
    "com.apple.dictionary.AppleDictionary",
    "com.apple.dictionary.OAWT",
    "com.apple.dictionary.NOAD",
    "com.apple.dictionary.OTE",
    "com.apple.dictionary.de.DDDSI",
    "com.apple.dictionary.OxfordGerman",
    "com.apple.dictionary.OxfordFrench",
    "com.apple.dictionary.OxfordItalian",
    "com.apple.dictionary.OxfordRussian",
    "com.apple.dictionary.OxfordSpanish"
  )'

  echo "Shortcuts settings."
  defaults write com.apple.Terminal NSUserKeyEquivalents '{ "Standardgr\\U00f6\\U00dfe wiederherstellen" = "@$r"; }'
  defaults write com.apple.Preview NSUserKeyEquivalents '{ "Text hervorheben" = "@h"; }'
  defaults write com.microsoft.onenote.mac NSUserKeyEquivalents '{ "Einf\\U00fcgen" = "@$v";
        "Einf\\U00fcgen und Formatierung angleichen" = "@v";
        "Sprache f\\U00fcr Korrekturhilfen festlegen..." = "@l"; }'
  defaults write org.audacityteam.audacity NSUserKeyEquivalents '{ "Audio exportieren ..." = "@$s"; }'

  echo "Various other settings."
  # Emoji & Symbole Palette
  defaults write com.apple.CharacterPaletteIM CVActiveCategories '(
    "Category-Emoji",
    "Category-Bullets",
    "Category-Pictographs",
    "Category-Latin",
    "Category-MathematicalSymbols",
    "Category-Arrows",
    "Category-CurrencySymbols",
    "Category-ParenthesesAll",
    "Category-PhoneticAlphabet",
    "Category-PunctuationAll",
    "Category-MusicalSymbols",
    "Category-DigitsAll",
    "Category-SignStandardSymbols",
    "Category-Greek",
    "Category-LetterlikeSymbolsAll",
    "Category-Unicode",
    "Category-ISO8859_1"
  )'

  # Disable creation of Metadata Files on Network and USB Volumes
  defaults write com.apple.desktopservices DSDontWriteNetworkStores 1
  defaults write com.apple.desktopservices DSDontWriteUSBStores 1

  defaults write -g AppleShowAllExtensions 1
  defaults write -g KeyRepeat 6
  defaults write -g InitialKeyRepeat 15

  #let user choose layout and restart terminal & install script
  echo "The computer will reboot now to apply the settings. After that, please start this script again."
  printf "\e[4mHint\e[0m: Just set your favourite terminal layout to default.\n"
  printf "\e[4mHint2\e[0m: Activate secure text entry.\n"
  printf "\e[4mHint3\e[0m: Switch keyboard layout as desired. "
  waitUser
  echo "Restarting now ..."
  sudo shutdown -r now
  exit 0
else
  echo "Skipped preferences installation."
fi

# install internet
ping -t 3 -c 1 8.8.8.8 >& /dev/null
if [[ $? -ne 0 ]]; then #first time. no internet installed
  tell "Internet connection installation"
  networksetup -setairportpower en0 on
  #wlan login
  installWifi "$def_ssid" "def_password" #pass not installed yet, so paste password in prefs section (at top) before running
  #AEG
  printf "Turning Wi-Fi off ..."
  networksetup -setairportpower en0 off
  echo " and on ..."
  networksetup -setairportpower en0 on
  sleep 3
  ping -t 3 -c 1 8.8.8.8 >& /dev/null
  if [[ $? -ne 0 ]]; then
    echo "Auto connection failed. Please select the network from menu bar."
    echo "This script will continue as soon as an internet connection is found."
    ping -t 3 -c 1 8.8.8.8 >& /dev/null
    while [[ $? -ne 0 ]]; do
      sleep 1
      ping -t 3 -c 1 8.8.8.8 >& /dev/null
    done
  fi
else
  echo "Skipped internet installation."
fi

# sudo cpan chordpro

# install dashboard apps
if [[ -d "$dashboard" ]]; then
  tell "Dashboard app installation"
  c dashboard
  cd "dashboard"
  for wgt in *; do
    open "$wgt"
    waitUser "Install: $wgt"
  done
  cd ".."
  rm -rf dashboard
else
  echo "Skipped Dashboard apps (no \"dashboard\" directory available at $thisdir)"
fi

# install homebrew
if [[ -z $(which brew) ]]; then
  echo "Installing Homebrew ..."
  /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)" || die "Installing brew failed."
  echo "Tapping caskroom ..."
  brew tap caskroom/cask || die "brew tap caskroom/cask failed."
else
  echo "Skipped brew installation."
fi

# install dropbox
if [[ ! -e /Applications/Dropbox.app/ ]]; then
  #brew install dropbox
  tell "Dropbox installation"
  brew cask install dropbox || die "brew cask install dropbox failed!"
  #log in dropbox
  open /Applications/Dropbox.app/
  waitUser "Please log in to dropbox!" #deps in Programmchen now available
else
  echo "Skipped dropbox installation."
fi

#TODO
# install other wifis
# pass SSID | sed -n '2,$p' | awk '{$1=""; print $0}'
# - install "RZUWsec"
# provide optional network change (and connection test afterwards)


# TODO
# install adobe, contains key
# install microsoft programs, user gui login
# install xcode
# - install from app store (required by mas, sign in by the way)
# - sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer
# - sudo xcodebuild -license

if [[ -z $(which mas) ]]; then
  tell "mas installation"
  brew install mas || die "brew install mas failed."
  if [[ -z $(mas account) ]]; then
    mas signin --dialog 
    waitUser "Please sign in to App Store"
  fi
  echo "mas account: $(mas account)"
else
  echo "Skipped mas installation."
fi

if [[ -z $(which pass) ]]; then
  tell "pass installation"
  brew install pass || die "brew install pass failed."
else
  echo "Skipped pass installation."
fi

# TODO
#IntelliJ config folder
#install intelliJ

echo
########################################################################################################
##### Full automatic part (place as much as possible here)
########################################################################################################
# In this part, there is *no* need for user intervention at all
tell "Full automatic part"
echo

if [[ -z $skipauto ]]; then
# ensure required dropbox content synced
while [[ ! -e "$trading_icon" ]]; do
  printf "Please wait until required dropbox data is synced "
  sleep 1
  printf "."
  sleep 1
  printf "."
  sleep 1
  printf "."
  sleep 1
  printf "\r\e[K"
done
echo "All required dropbox data available."
echo

#app store
if [[ -z $(mas account) ]]; then
  open /Applications/App\ Store.app/
  waitUser "Please sign in to App Store"
fi
tell "App Store apps installation"
failedapps=""
masls=$(mas list | awk '{print $1}')
for app in ${masinstalls[@]}; do
  if [[ -z $(echo "$masls" | grep $app) ]]; then
    echo "Installing $cask ..."
    mas install $app
    if [[ $? -ne 0 ]]; then
      echo "Failed installing $app $(mas info $app | sed -n 1p)"
      failedapps+="$app "
    fi
  else
    echo "Skipped already installed app: $app"
  fi
done
if [[ -n "$failedapps" ]]; then
  echo "Retry following app installs:"
  for app in $failedapps; do
    echo "mas install $app"
  done
else
  echo "All apps installed with no obvious problems."
fi
echo


tell "brew cask installs"
#brew cask install
failedcasks=
echo "Looking up installed brew casks ..."
brewcaskls=$(brew cask ls)
for cask in ${brewcasks[@]}; do
  if [[ -z $(echo "$brewcaskls" | grep $cask) ]]; then
    echo "Installing cask $cask ..."
    brew cask install $cask
    if [[ $? -ne 0 ]]; then
      echo "Failed installing $cask"
      failedcasks+="$cask "
    fi
  else
    echo "Skipped already installed cask: $cask"
  fi
done
if [[ -n "$failedcasks" ]]; then
  echo "Retry following cask installs:"
  for cask in $failedcasks; do
    echo "brew cask install $cask"
  done
else
  echo "All casks installed with no obvious problems."
fi
echo

#brew install
tell "brew installs"
failedformulas=
echo "Looking up installed brew formulas ..."
brewls=$(brew ls)
for formula in ${brews[@]}; do
  if [[ -z $(echo "$brewls" | grep $formula) ]]; then
    echo "Installing formula $formula ..."
    brew install $formula
    if [[ $? -ne 0 ]]; then
      echo "Failed installing $formula"
      failedformulas+="$formula "
    fi
  else
    echo "Skipped already installed formula: $formula"
  fi
done
if [[ -n "$failedformulas" ]]; then
  echo "Retry following formula installs:"
  for formula in $failedformulas; do
    echo "brew install $formula"
  done
else
  echo "All formulas installed with no obvious problems."
fi
echo

#create WhatsApp and Trading212 app with nativefier
if [[ ! -e "/Applications/WhatsApp Web.app" ]]; then
  tell "Whatsapp Web.app installation"
  echo "Installing Whatsapp Web.app with nativefier from http://web.whatsapp.com/"
  nativefier -n "WhatsApp Web" "http://web.whatsapp.com/" || die "Creating Whatsapp Web.app failed."
  mv "WhatsApp Web-darwin-x64/WhatsApp Web.app" /Applications/
  rm -rf WhatsApp Web-darwin-x64/
else
  echo "Skipped creation of Whatsapp Web.app with nativefier."
fi

if [[ ! -e "/Applications/Trading212.app" ]]; then
  tell "Trading212.app installation"
  echo "Installing Trading212.app with nativefier from https://www.trading212.com/"
  nativefier -i "$trading_icon" -n "Trading212" 'https://www.trading212.com/' || die "Creating Trading212.app failed."
  
  # Remove context menu
  mainpath="Trading212-darwin-x64/Trading212.app/Contents/Resources/app/lib/main.js"
  if [[ -e "$mainpath" ]]; then
    mainjs=$(cat "$mainpath")
    contextmenustart=$(echo "$mainjs" | grep -n "_electron.ipcMain.on('contextMenuOpened', function (event, targetHref) {" | awk '{ print $1 + 0; }') # 6893
    contextmenuend=$(echo "$mainjs" | grep -n 'mainWindow.contextMenuOpen = true;' | awk '{ print $1 + 1; }') # 6928
    if [[ -n $contextmenustart && -n $contextmenuend ]]; then
      echo "$mainjs" | sed "${contextmenustart},${contextmenuend}d" > "$mainpath"
      echo "Successfully removed context menu (sed '${contextmenustart},${contextmenuend}d')"
    else
      echo "Failed to fetch context menu location. Please remove context menu initialization manually."
      echo "mate -l '6893-6928' \"$mainpath\" # location with nativefier 7.6.1; leave surrounding 'function initContextMenu(mainWindow) {'"
    fi
  else
    echo "Failed to remove context menu. File not found: $mainpath"
  fi
  
  mv "Trading212-darwin-x64/Trading212.app" /Applications/ || die "Moving to /Applications/ failed."
  rm -rf Trading212-darwin-x64/
else
  echo "Skipped creation of Trading212.app with nativefier."
fi
else
  echo "Skipped brew, brew cask, mas and nativefier installs."
fi

# TODO
# Thunderbird folder
# IdeaProjects
# other files (documents, pictures, music)
# place minecraft in /Applications
# copy power point draft uniwue
# install fonts (from Word as well?)

echo
####################################################
### Manual part
####################################################
# In this part, the script is just instructing, at most helping out a bit
tell "Manual part"
echo

#one time prefs, that need sudo
bash4=/usr/local/bin/bash
if [[ -f $bash4 && -z $(cat /etc/shells | grep $bash4) ]]; then
  tell "Changing the login shell to $bash4 (bash4)"
  sudo bash -c 'echo $bash4 >> /etc/shells' || die "Adding $bash4 to /etc/shells failed."
  chsh -s $bash4 || die "Changing users default shell failed."
  waitUser "Please close this window now and start this script again."
  echo "Now."
  exit 0
else
  echo "Skipped login shell change."
fi

# TODO Settings
# - Dock: Finder, Not, th, f, Spotify, note, newsflow, audcity, idea, lightshot, prefs, terminal, FileMerge
# - notational velocity: ~/Dropbox/Org/Notational/
# - spotify login
# - one note login, ggf Excel, Word, PowerPoint
# - import firefox bookmarks
# - calender login google
# - import newsflow opml
# - wine installs (jardinains, siedler5, finale)
# - Go2Shell: cd %PATH%; printf "\e[F\e[K"
# - install textmate bundles
# - check os shortcuts
# - check dictionaries
  # German - English.dictionary
  # Wikipedia.wikipediadictionary
  # Apple Dictionary.dictionary
  # New Oxford American Dictionary.dictionary
  # Deutsch-Englisch.dictionary
  # OpenThesaurus Deutsch.dictionary
  # Duden Dictionary Data Set I.dictionary
  # Oxford American Writer's Thesaurus.dictionary
  # Oxford Thesaurus of English.dictionary
  # French - English.dictionary
  # Spanish - English.dictionary
  # Italian - English.dictionary
  # Russian - English.dictionary

popd &> /dev/null
