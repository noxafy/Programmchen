#!/bin/bash

usage="\e[1msys_install\e[0m -h | [-s]"
help="An install script for mac reset.
$usage
	\e[1m-h\e[0m	Displays this message and exits.

Fast internet connection recommended.
Warning: Leave in place!
"

########################################################################################################
##### Args parsing
########################################################################################################

# TODO: Divide full and slim install
case $1 in
  -h)
    printf "$help"
    exit 0
    ;;
  -*)
    printf "Wrong argument: %s\n$usage -- See -h for more help.\n" "$1"
    exit 1
    ;;
esac

########################################################################################################
##### Variables
########################################################################################################

thisdir=$(dirname "$PWD/$BASH_SOURCE")
if [[ ! -e $thisdir ]]; then
  thisdir=$(dirname "$BASH_SOURCE")
fi

# dirs
templates="$C/Org/Vorlagen"
# resources
duolingo_icon="$IT/duolingo.jpg" # icon for Duolingo.app
graphing_icon="$IT/graphing calculator.jpg" # icon for Graphing Calculator.app
trading_icon="$PROJ/212/js-listener/trading212.png" # icon for Trading212.app
trading_script="$PROJ/212/js-listener/212listener.js" # listener for Trading212.app
firefox_bookmark_backup="$thisdir/files/firefox_bookmark.jsonlz4"
safari_bookmark_backup="$thisdir/Safari/Bookmarks.plist"
newsflow_opml_backup="$thisdir/files/Newsflow Subscriptions.xml"

py_ver=python@3.8

# brew essentials
brews=(
  cloc
  fd
  fortune
  fzf
  heksa
  howdoi
  imagemagick   # installs convert
  jq
  lorem
  lsd
  nano
  node
  pdfgrep
  pup
  $py_ver
  recode
  rename
  ripgrep
  rsync
  testdisk	# Powerful free data recovery utility
  tesseract
  wget
  wiki
)

# extended / main only
brews+=(
airshare
agedu		# Unix utility for tracking down wasted disk space
#aspell
bash
bash-completion
bash-snippets
bfg
brightness
#bro		# Network security monitor
#broot		# New way to see and navigate directory trees
#chafa		# Versatile and fast Unicode/ASCII/ANSI graphics renderer
#cheat		# Better version contained in bash snippets
#choose		# reads from stdin, lets user choose one line, prints that line to stdout, exits
#chordii
coreutils	# GNU File, Shell, and Text utilities
diff-pdf        # needs xquartz
exiftool
#expect		# automate interactive applications
#fasttext	# fast text representation and classification
ffmpeg
#freeling	# Suite of language analyzers
#fswatch	# Monitor a directory for changes
gcal
#ghostscript	# pdf2ps, ps2pdf, and more
git
#geoipupdate
go
#gobject-introspection
googler
hexedit
openjdk
#launch4j   	# Cross-platform Java executable wrapper
#lf		# Terminal visual file manager
#mas #already installed
#maven
#maven-completion
monolith	# Saving complete web pages as a single HTML
mplayer
#mujs
mysql
nativefier
#navi 		# Interactive cheatsheet tool
#nbdime		# Jupyter Notebook Diff and Merge tools
#pass #already installed
pandoc		# markup format conversion
pastel		# Generate, analyze, convert and manipulate colors
#plan9port
pueue
shpotify
#sic		# Minimal multiplexing IRC client
tesseract-lang
tldr		# Simplified and community-driven man pages
#tor
#trash		# CLI tool that moves files or folder to the trash
trimage
#unrar		# Extract, view, and test RAR archives
#wine		# use wine-stable in brew casks
#winetricks
woff2
#you-get
youtube-dl
#zeek 		# passive network traffic analyzer
)

# essentials
brewcasks=(
  disablemonitor
  firefox
  flux
  font-hack-nerd-font
  iterm2
  mpv
  qlstephen
  textmate
  the-unarchiver
)

# casks needing the password
brewcasks+=(
  background-music
  google-earth-pro
  mactex
  #soundflower
  wine-stable
  xquartz
)

# extended / main only
brewcasks+=(
#anaconda
android-file-transfer
#android-sdk
#android-studio
anki
atom
#avira-antivirus
#axure-rp
#balenaetcher 		# utility for writing image files
bibdesk
#blender
calibre
#celestia
discord
#docker
drawio
#eul 			# clear and simple status monitoring
#font-times-newer-roman	# slightly wider times font
geogebra
#gephi			# Utility to visualize and explore GraphViz graphs
#graphsketcher		# draw graphs
intellij-idea
#jwzlyrics
#kodi
#mathpix-snipping-tool  #nice, but only 50 pics/month
#mp3tag
musescore
#nextcloud #already installed
#notational-velocity
#nvalt
#openoffice
#osxfuse 		#maybe needed for plugging the external drive?
sage
signal
#sketch
#skype
#sonic-visualiser
spotify
#stellarium
#teamviewer
telegram
#texstudio
thunderbird
#tor-browser
ukelele
)

masinstalls=(
### Free
890805912 # Newsflow
595191960 # CopyClip
1061963639 # VirtualDJ 8
1278508951 # Trello

### Apple
#497799835 # XCode
408981434 # iMovie
409183694 # Keynote
409201541 # Pages
409203825 # Numbers

### paid
1247301872 # Logoist 3
824171161 # Affinity Designer
634148309 # Logic Pro X
424389933 # Final Cut Pro
634159523 # MainStage 3
434290957 # Motion
424390742 # Compressor
)

pips=(
notebook # jupyter
tensorflow
matplotlib
ipywidgets
sklearn
scipy
numpy
pandas
ipython
ipykernel
)

#variables
def_ssid=
def_password=
wlan_device=en0

########################################################################################################
##### Helper functions
########################################################################################################

die() {
  echo "ERROR: $*!" >&2
  exit 1
}

c() {
  while [[ -n $1 ]]; do
    origin="$thisdir/$1"
    target="$PWD/$1"
    shift
    if [[ ! -e "$origin" ]]; then
      echo "WARNING: Requested file or dir not available: $origin"
      continue;
    fi
    if [[ -d "$target" && "$origin" == */ ]]; then
      printf "Copying contents of $origin to $target"
    else
      #rm -f "$target" &> /dev/null
      printf "Copying $origin to $target"
    fi
    printf " ($(du -sh "$origin" | awk '{print $1}')) ...\n"
    cp -a "$origin" "$target" || die "Copying $origin to $target failed!"
  done
}

installWifi() {
  ssid=$1
  passwd=$2
  while [[ -z "$ssid" ]]; do
    networks=$(/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport -s)
    echo "Available networks (WPA2 only):"
    echo "$networks" | sed -n 1p
    echo "$networks" | grep "WPA2"
    read -p "Please enter a SSID to connect to (s = search again all available): " ssid
    if [[ -z "$ssid" ]]; then
      echo "The SSID must not be empty to connect to the internet."
    elif [[ "$ssid" = s ]]; then
      ssid=
    elif [[ -z $(echo "$networks"  | awk '{print $1}' | grep -- "^${ssid}\$") ]]; then
      echo "Network \"$ssid\" is not available!"
      ssid=
    fi
  done
  if [[ -n $(networksetup -listpreferredwirelessnetworks "$wlan_device" | grep -- "^[[:space:]]*${ssid}\$") ]]; then
    printf "%s already installed!\n" "$ssid"
    return;
  fi
  while [[ -z "$passwd" ]]; do
    read -p "Please enter the password for $ssid: " passwd
  done
  networksetup -addpreferredwirelessnetworkatindex "$wlan_device" "$ssid" 1000 WPA2 "$passwd"
}

letRead() {
  if [[ -n "$*" ]]; then
    echo "$*"
    sleep $(echo "scale=3;${#1}/40+0.36" | bc)
  fi
}

pressEnterTo() {
  local message
  if [[ -n "$1" ]]; then
    message=$1
  else
    message="continue"
  fi
  read -p "Please press [Enter] to ${message}: " trash
  #printf "\e[A\r\e[K"
  echo
}

section() {
  echo
  echo "#################################"
  echo "### $*"
  echo "#################################"
}

supersection() {
  echo
  echo "####################################################"
  echo "####################################################"
  echo "### $*"
  echo "####################################################"
  echo "####################################################"
}

########################################################################################################
##### Partly automatic part
########################################################################################################
# In this part, the script can do mostly on its own, but needs hands-on from time to time
supersection "Partly automatic part"

#go home first
pushd "$HOME" &> /dev/null || die "cd to $HOME failed"

# check if .profile has been executed
if [[ -z "$P" ]]; then
  echo "Welcome to your new computer! We will start now setting up everything you need."

  section "Preferences installation"

  # install basic shell sources
  c .bashrc .profile .zshrc
  printf "#dummy" > "$HOME/.public_profile" # dummy for preventing sourcing error and to be replaced later
  printf "#dummy" > "$HOME/.private_profile"
  P=$(cat .profile | grep P= | sed "s/export P=//")
  mkdir "$(eval echo $P)" # dummy

  # install the other shit
  if [[ ! -d .m2 ]]; then
    mkdir .m2 || die "mkdir $HOME/.m2 failed"
  fi
  c .m2/settings.xml .ssh .password-store .gnupg
  chmod 700 .gnupg .password-store .password-store/* .ssh
  chmod 600 .password-store/**/*.gpg
  chmod 600 .ssh/*
  chmod 600 .gnupg/*

  #install terminal layouts
  #open "$thisdir/*.terminal" # $IT/Settings/Terminal/*.terminalÏ‡

  #keyboard layout
  pushd "$HOME/Library" &> /dev/null || die "cd to $HOME/Library failed"
  c "Keyboard Layouts/" # - keyboard layout

  # copy dictionaries
  c "Dictionaries/"
  popd &> /dev/null

  # TODO
  # install fonts (from Word as well?)

  #defaults write com.apple.Siri StatusMenuVisible 0 #use siri in status bar as reminder of deactivating it

  #print all defaults, major unreadable values filtered out
  #defaults read | grep -v "AppleIDAgentMetaInfo" | grep -v "AppleIDAccount" | grep -v 'FZPersonPictureData' | grep -v 'pref:200:Machine Preferences' \
  # | grep -v 'FZPersonSmallPictureData' | grep -v 'FZPersonPictureData' | grep -v "iTunes Location" | grep -v 'ProcessViewerColumns' | grep -v '\\Ud83c' \
  # | grep -v 'FFNamingPresets' | grep -v 'FFMediaImportOrganizerFilmListView' | grep -v 'timeFormatLK' | grep -v 'FFShareDestinationsKey' \
  # | grep -v 'folderActions' | grep -v 'LibraryBookmark' | grep -v 'IPXDefaultLibraryURLBookmark' | grep -v 'IPXDefaultWorkspace' \
  # | grep -v 'Data =' | grep -v 'WebKitUserStyleSheetLocationPreferenceKey' | grep -v 'TTInspectorProcesses' | grep -v 'TextBoldColor' \
  # | grep -v 'BackgroundColor' | grep -v 'CursorColor' | grep -v 'SelectionColor' | grep -v 'TextColor' | grep -v 'book =' | grep -v 'DVTRecentColors' \
  # | grep -v CacheBag | grep -v 'file-bookmark' | grep -v 'TSWPInvisiblesColor' | grep -v 'FFMediaImportOrganizerFilmListView' \
  # | grep -v 'pref:130:Preferences' | grep -v 'eqps:129:EQPreset' | grep -v 'services =' | grep -v 'GarageBand' | grep -v 'weather =' \
  # | grep -v 'UserCrossfade' | grep -v 'BookmarkData' | grep -v 'kBookmarkDataKey' | grep -v 'FFShareDestinationsKey' | grep -v 'KeyBingingTable' \
  # | grep -v 'MacAppStoreReceiptData_11.0' | grep -v 'LoginItemsColumn2' | grep -v ' req = ' | grep -v 'LogicBinaryPreferences' | grep -v 'CachedBag'
  # parse output to command
  # sed 's/= //g;s/;//g;s/"/defaults -currentHost write -g /;s/"//'
  # sed 's/= //g;s/;//g;s/ *"*/defaults write /;s/"//'

  # trackpad prefs
  # "Apple Global Domain" = {
  echo "Mouse and Trackpad settings"
  defaults -currentHost write -g com.apple.mouse.tapBehavior 1
  defaults -currentHost write -g com.apple.trackpad.enableSecondaryClick 1
  defaults -currentHost write -g com.apple.trackpad.fiveFingerPinchSwipeGesture 2
  defaults -currentHost write -g com.apple.trackpad.fourFingerHorizSwipeGesture 2
  defaults -currentHost write -g com.apple.trackpad.fourFingerPinchSwipeGesture 2
  defaults -currentHost write -g com.apple.trackpad.fourFingerVertSwipeGesture 2
  defaults -currentHost write -g com.apple.trackpad.momentumScroll 1
  defaults -currentHost write -g com.apple.trackpad.pinchGesture 1
  defaults -currentHost write -g com.apple.trackpad.rotateGesture 1
  defaults -currentHost write -g com.apple.trackpad.scrollBehavior 2
  defaults -currentHost write -g com.apple.trackpad.threeFingerDragGesture 0
  defaults -currentHost write -g com.apple.trackpad.threeFingerHorizSwipeGesture 2
  defaults -currentHost write -g com.apple.trackpad.threeFingerTapGesture 2
  defaults -currentHost write -g com.apple.trackpad.threeFingerVertSwipeGesture 2
  defaults -currentHost write -g com.apple.trackpad.twoFingerDoubleTapGesture 1
  defaults -currentHost write -g com.apple.trackpad.twoFingerFromRightEdgeSwipeGesture 3
  # };

  echo "Dock settings"
  # "com.apple.dock" = {
  defaults write com.apple.dock autohide 1
  defaults write com.apple.dock largesize 50
  defaults write com.apple.dock magnification 1
  defaults write com.apple.dock minimize-to-application 1
  defaults write com.apple.dock orientation left
  defaults write com.apple.dock tilesize 42
  # }

  # Dictionary
  echo "Dictionary settings"
  defaults write com.apple.Dictionary "last available dictionaries" "(
    \"/System/Library/Frameworks/CoreServices.framework/Frameworks/DictionaryServices.framework/Resources/Wikipedia.wikipediadictionary\",
    \"$HOME/Library/Containers/com.apple.Dictionary/Data/Library/Dictionaries/Deutsch-Englisch.dictionary\",
    \"$HOME/Library/Containers/com.apple.Dictionary/Data/Library/Dictionaries/OpenThesaurus Deutsch.dictionary\",
    \"asset:/Oxford Dictionary of English.dictionary\",
    \"asset:/Traditional Chinese.dictionary\",
    \"asset:/The Standard Dictionary of Contemporary Chinese.dictionary\",
    \"asset:/Simplified Chinese - English.dictionary\",
    \"asset:/Danish.dictionary\",
    \"asset:/French.dictionary\",
    \"asset:/Hindi.dictionary\",
    \"asset:/Italian.dictionary\",
    \"asset:/Sanseido Super Daijirin.dictionary\",
    \"asset:/Sanseido The WISDOM English-Japanese Japanese-English Dictionary.dictionary\",
    \"asset:/Korean.dictionary\",
    \"asset:/Korean - English.dictionary\",
    \"asset:/Dutch.dictionary\",
    \"asset:/Dutch - English.dictionary\",
    \"asset:/Norwegian.dictionary\",
    \"asset:/Portuguese.dictionary\",
    \"asset:/Portuguese - English.dictionary\",
    \"asset:/Russian.dictionary\",
    \"asset:/Swedish.dictionary\",
    \"asset:/Spanish.dictionary\",
    \"asset:/Thai.dictionary\",
    \"asset:/Turkish.dictionary\",
    \"asset:/TTY Abbreviations Dictionary.dictionary\",
    \"/System/Library/Assets/com_apple_MobileAsset_DictionaryServices_dictionaryOSX/cd4d7cc1cd227a13d2b9c029f86c940f94b7543a.asset/AssetData/Apple Dictionary.dictionary\",
    \"/System/Library/Assets/com_apple_MobileAsset_DictionaryServices_dictionaryOSX/685cdc3ef70cf91c881f4c7c2e98c3f00ace218b.asset/AssetData/Oxford American Writer\'s Thesaurus.dictionary\",
    \"/System/Library/Assets/com_apple_MobileAsset_DictionaryServices_dictionaryOSX/975b56580ea4bbbe1d29ca14a3b5e1a81411c787.asset/AssetData/New Oxford American Dictionary.dictionary\",
    \"/System/Library/Assets/com_apple_MobileAsset_DictionaryServices_dictionaryOSX/2fcc349eb53d7c336b8372758b70508eb8e2ac0b.asset/AssetData/Oxford Thesaurus of English.dictionary\",
    \"asset:/Traditional Chinese - English.dictionary\",
    \"/System/Library/Assets/com_apple_MobileAsset_DictionaryServices_dictionaryOSX/59c252b96e44a6dbdc931e5b75a169f22eb6fa43.asset/AssetData/Duden Dictionary Data Set I.dictionary\",
    \"/System/Library/Assets/com_apple_MobileAsset_DictionaryServices_dictionaryOSX/2a679af89e5bb8b417ff02b0fef81ca39ffad9a5.asset/AssetData/German - English.dictionary\",
    \"/System/Library/Assets/com_apple_MobileAsset_DictionaryServices_dictionaryOSX/e5ccfe0082277d86bcac7e63268a21272f704c34.asset/AssetData/French - English.dictionary\",
    \"/System/Library/Assets/com_apple_MobileAsset_DictionaryServices_dictionaryOSX/d574b5371fbd293fe74c473f37a18fa300ecdc31.asset/AssetData/Italian - English.dictionary\",
    \"/System/Library/Assets/com_apple_MobileAsset_DictionaryServices_dictionaryOSX/60f594992693ff3f88af3f505da1451dc5af9c8c.asset/AssetData/Russian - English.dictionary\",
    \"/System/Library/Assets/com_apple_MobileAsset_DictionaryServices_dictionaryOSX/0c32ebe1de94a069aca537b10f718806c5ad50c1.asset/AssetData/Spanish - English.dictionary\"
  )"
  defaults write com.apple.DictionaryServices DCSActiveDictionaries "(
    \"/System/Library/Frameworks/CoreServices.framework/Frameworks/DictionaryServices.framework/Resources/Wikipedia.wikipediadictionary\",
    \"$HOME/Library/Containers/com.apple.Dictionary/Data/Library/Dictionaries/Deutsch-Englisch.dictionary\",
    \"$HOME/Library/Containers/com.apple.Dictionary/Data/Library/Dictionaries/OpenThesaurus Deutsch.dictionary\",
    \"com.apple.dictionary.AppleDictionary\",
    \"com.apple.dictionary.OAWT\",
    \"com.apple.dictionary.NOAD\",
    \"com.apple.dictionary.de.DDDSI\",
    \"com.apple.dictionary.OxfordGerman\",
    \"com.apple.dictionary.OTE\",
    \"com.apple.dictionary.OxfordFrench\",
    \"com.apple.dictionary.OxfordItalian\",
    \"com.apple.dictionary.OxfordSpanish\",
    \"com.apple.dictionary.OxfordRussian\"
  )"

  echo "Preview settings"
	defaults write com.apple.Preview "NSToolbar Configuration CommonToolbar_v5.1" '{
        "TB Default Item Identifiers" =         (
            view,
            zoom,
            share,
            NSToolbarFlexibleSpaceItem,
            markup,
            rotate,
            "edit_banner",
            search
        );
        "TB Display Mode" = 2;
        "TB Icon Size Mode" = 1;
        "TB Is Shown" = 1;
        "TB Item Identifiers" =         (
            view,
            "zoom_to_fit",
            scale,
            zoom,
            "goto_page",
            markup,
            NSToolbarFlexibleSpaceItem,
            inspector,
            selection,
            "edit_banner",
            search
        );
        "TB Size Mode" = 1;
    }'

  echo "Various other settings"
  # Emoji & Symbole Palette
  defaults write com.apple.CharacterPaletteIM CVActiveCategories '(
    "Category-Emoji",
    "Category-Bullets",
    "Category-Pictographs",
    "Category-Latin",
    "Category-MathematicalSymbols",
    "Category-Arrows",
    "Category-CurrencySymbols",
    "Category-ParenthesesAll",
    "Category-PhoneticAlphabet",
    "Category-PunctuationAll",
    "Category-MusicalSymbols",
    "Category-DigitsAll",
    "Category-SignStandardSymbols",
    "Category-Greek",
    "Category-LetterlikeSymbolsAll",
    "Category-Unicode",
    "Category-ISO8859_1"
  )'

  # Disable creation of Metadata Files on Network and USB Volumes
  defaults write com.apple.desktopservices DSDontWriteNetworkStores 1
  defaults write com.apple.desktopservices DSDontWriteUSBStores 1

  defaults write -g AppleShowAllExtensions 1
  defaults write -g KeyRepeat 2
  defaults write -g InitialKeyRepeat 15

  defaults write com.apple.systemsound "com.apple.sound.uiaudio.enabled" -int 0

  #let user choose layout and restart terminal & install script
  echo "The computer will reboot now to apply the settings. After that, please start this script again."
  printf "\e[4mHint\e[0m: Just set your favourite terminal layout to default.\n"
  printf "\e[4mHint2\e[0m: Activate secure text entry.\n"
  printf "\e[4mHint3\e[0m: Switch keyboard layout as desired. (Maybe only after restart?)\n"
  pressEnterTo restart
  letRead "sudo shutdown -r now ..."
  sudo shutdown -r now
  exit 0
else
  echo "Skipped preferences installation"
fi

# install internet
if ! ping -t 3 -c 1 8.8.8.8 >& /dev/null; then # no internet connection
  if [[ $(networksetup -listpreferredwirelessnetworks "$wlan_device" | wc -l) -le 1 ]]; then #first time; no internet installed
    section "Internet connection installation"
    networksetup -setairportpower "$wlan_device" on
    #wlan login
    installWifi "$def_ssid" "$def_password" #pass not installed yet, so paste password in prefs section (at top) before running
  else
    echo "No internet connection detected!"
  fi
  #AEG
  printf "Turning Wi-Fi off ..."
  networksetup -setairportpower "$wlan_device" off
  echo " and on ..."
  networksetup -setairportpower "$wlan_device" on
  sleep 3
  if ! ping -t 3 -c 1 8.8.8.8 >& /dev/null; then
    echo "Auto connection failed. Please select the network from menu bar."
    echo "This script will continue as soon as an internet connection is found."
    while ! ping -t 3 -c 1 8.8.8.8 >& /dev/null; do
      sleep 1
    done
  fi
else
  echo "Skipped internet installation"
fi

if ! xcode-select -p &> /dev/null; then
  xcode-select --install || die "xcode-select --install failed"
  pressEnterTo
else
  echo "Skipped XCode command line developer tools installation"
fi

# install oh-my-zsh
if [[ ! -d "$ZSH" ]]; then
  section "Oh my zsh installation"
  sh -c "KEEP_ZSHRC=yes $(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh); exit" || die "oh-my-zsh installation failed"
else
  echo "Skipped oh-my-zsh installation"
fi

# install brew
if ! hash brew &>/dev/null; then
  section "Homebrew installation (Admin rights required)"
  sh -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)" || die "Installing brew failed" # intel version writes only and exclusively to /usr/local and ~/Library/Caches/Homebrew
  echo "Tapping caskrooms ..."
  brew tap homebrew/cask || die "brew tap homebrew/cask failed"
  brew tap homebrew/cask-fonts || die "brew tap homebrew/cask-fonts failed"
else
  echo "Skipped brew installation"
fi

# install pass
if ! hash pass &>/dev/null; then
  section "pass installation"
  brew install pass || die "brew install pass failed"
else
  echo "Skipped pass installation"
fi

# copy .private_profile from pass
if [[ ! -e ~/.private_profile || $(cat ~/.private_profile) == "#dummy" ]]; then
  section "Copy files from pass"
  echo "Copying .private_profile from pass"
  pass .private_profile > ~/.private_profile

  echo "Please restart this session now."
  exit 0
else
  echo "Skipped copying .private_profile from pass"
fi

# copy .gitconfig from pass
if [[ ! -e ~/.gitconfig ]]; then
  echo "Copying .gitconfig from pass"
  pass .gitconfig > ~/.gitconfig
else
  echo "Skipped copying .gitconfig from pass"
fi

#TODO
# install other wifis (requires "pass")
# pass SSID | sed -n '2,$p' | awk '{$1=""; print $0}'
# - install "eduroam"
# provide optional network change (and connection test afterwards)

# install nextcloud
if [[ ! -e /Applications/nextcloud.app/ ]]; then
  #brew install nextcloud
  section "Nextcloud app installation"
  brew install nextcloud || die "brew install nextcloud failed"
  #log in nextcloud
  letRead "Please log in to nextcloud"
  open /Applications/nextcloud.app/
  pass -c nextcloud # public_profile not yet loaded
  pressEnterTo
else
  echo "Skipped nextcloud installation"
fi

# install mas
if ! hash mas &>/dev/null; then
  section "mas installation"
  brew install mas || echo "brew install mas failed"
else
  echo "Skipped mas installation"
fi

if hash mas &> /dev/null && ! mas account &> /dev/null; then
  letRead "Please sign in to App Store!"
  open /System/Applications/App\ Store.app/
  pressEnterTo
  printf "mas account: %s\n" $(mas account)
fi

# TODO: move casks with password here

# install chordpro
if ! hash chordpro &>/dev/null; then
  section "Chordpro installation"
  #sudo cpan chordpro
  sudo cpan install chordpro || die "installing chordpro failed"
  echo
else
  echo "Skipped chordpro installation"
fi

# TODO: install java
# sudo ln -sfn $(brew --prefix)/opt/openjdk/libexec/openjdk.jdk /Library/Java/JavaVirtualMachines/openjdk.jdk

echo
section "brew cask installs"
#brew cask install
echo "Some casks might require your password"
failedcasks=
echo "Looking up installed brew casks ..."
brewcaskls=$(brew ls --cask)
for cask in ${brewcasks[@]}; do
  if [[ -z $(echo "$brewcaskls" | grep -e "$cask") ]]; then
    echo "Installing cask $cask ..."
    brew install --cask $cask
    if [[ $? -ne 0 ]]; then
      echo "Failed installing $cask"
      failedcasks+="$cask "
    fi
  else
    echo "Skipped already installed cask: $cask"
  fi
done
if [[ -z "$failedcasks" ]]; then
  echo "All casks installed with no obvious problems."
else
  echo "Following casks could not be installed: $failedcasks"
fi

########################################################################################################
##### Full automatic part (place as much as possible here)
########################################################################################################
# In this part, there is *no* need for user intervention at all
# no use of pressEnterTo function, die only in severe error cases
supersection "Full automatic part"

#app store
if hash mas &>/dev/null; then
  section "App Store apps installation"
  failedapps=""
  masls=$(mas list | awk '{print $1}')
  for app in ${masinstalls[@]}; do
    if [[ -z $(echo "$masls" | grep -e "$app") ]]; then
      echo "Installing $app ..."
      mas install $app
      if [[ $? -ne 0 ]]; then
        echo "Failed installing $app $(mas info $app | sed -n 1p)"
        failedapps+="$app "
      fi
    else
      echo "Skipped already installed app: $app"
    fi
  done
  if [[ -z "$failedapps" ]]; then
    echo "All apps installed with no obvious problems."
  else
    echo "Following apps could not be installed: $failedapps"
  fi
else
  echo "Skipped App Store app installations"
fi

# TOOD: move casks without password here

#brew install
section "brew installs"
failedformulas=
echo "Looking up installed brew formulas ..."
brewls=$(brew ls --formula)
for formula in ${brews[@]}; do
  if [[ -z $(echo "$brewls" | grep -e "$formula") ]]; then
    echo "Installing formula $formula ..."
    brew install $formula
    if [[ $? -ne 0 ]]; then
      echo "Failed installing $formula"
      failedformulas+="$formula "
    fi
  else
    echo "Skipped already installed formula: $formula"
  fi
done
if [[ -z "$failedformulas" ]]; then
  echo "All formulas installed with no obvious problems."
else
  echo "Following formulas could not be installed: $failedformulas"
fi

#pip installs #python should now be installed using brew
section "pip installs"
pip_exec=$(brew --prefix)/opt/$py_ver/libexec/bin/pip
$pip_exec -V
failedpackages=
echo "Looking up installed pip packages ..."
pipls=$($pip_exec list)
for package in ${pips[@]}; do
  if [[ -z $(echo "$pipls" | grep -e "$package") ]]; then
    echo "Installing package $package ..."
    $pip_exec install $package
    if [[ $? != 0 ]]; then
      echo "Failed installing $package"
      failedpackages+="$package "
    fi
  else
    echo "Skipped already installed package: $package"
  fi
done
if [[ -z "$failedpackages" ]]; then
  echo "All pip packages installed with no obvious problems."
else
  echo "Following packages could not be installed: $failedpackages"
fi

section "Copying of data folders"
# move remaining files from backup
pushd "$HOME" &> /dev/null || die "cd to $HOME/ failed"
c Desktop/ Downloads/ Documents/ Music/ Pictures/

pushd "Library" &> /dev/null || die "cd to $HOME/Library/ failed"
if [[ ! -d Thunderbird ]]; then
  c Thunderbird
else
  echo "Skipped copying of Thunderbird to $HOME/Library/"
fi

### place at ~/Library/Preferences
if [[ ! -n $(ls Preferences/IntelliJIdea* 2> /dev/null) ]]; then
  c Preferences/
else
  echo "Skipped copying of content of Preferences to $HOME/Library/Preferences/"
fi
popd &> /dev/null || die "cd failed" # HOME again

if [[ ! -e "$P"/.zshrc ]]; then
  git clone git@github.com:noxafy/Programmchen.git || die "Cloning Programmchen failed"
fi

if [[ ! -e "$P"/imgcat ]]; then
  pushd "$P" &>/dev/null
  wget https://iterm2.com/utilities/imgcat && chmod +x "$P"/imgcat
  wget https://iterm2.com/utilities/it2check && chmod +x "$P"/it2check
  popd &>/dev/null
fi

if [[ ! -e ~/.public_profile \
   || ! -e ~/.profile \
   || ! -e ~/.zshrc \
   || ! -e ~/.bashrc \
   || ! -e ~/.nanorc ]]; then
  section "Linking dotfiles to $HOME"

  function hardLink() {
    filename=$(basename "$1")
    filedir=$(dirname "$1")
    echo "Linking $filename from $filedir"
    ln -f "$1" ~
  }

  hardLink "$P"/.profile
  hardLink "$P"/.zshrc
  hardLink "$P"/.bashrc
  hardLink "$P"/.public_profile
  hardLink "$P"/.nanorc

  echo "Please restart this session now."
  exit 0
else
  echo "Skipped linking dotfiles"
fi

### place at /Applications
cd "/Applications" || die "cd to /Applications failed"
if [[ ! -d Minecraft ]]; then
  c Minecraft
else
  echo "Skipped copying Minecraft to /Applications/"
fi

popd &> /dev/null || die "cd failed"

section "nativefier app creations"
# ensure required cloud content synced
[[ ! -e "$duolingo_icon" ]] && echo "Icon for Duolingo not found: $duolingo_icon"
[[ ! -e "$trading_icon" ]] && echo "Icon for Trading212 not found: $trading_icon"
[[ ! -e "$graphing_icon" ]] && echo "Icon for Graphing Calculator not found: $graphing_icon"
[[ ! -e "$trading_script" ]] && echo "Script for Trading212 not found: $trading_script"
while [[ ! ( -e "$duolingo_icon" && -e "$trading_icon" && -e "$trading_script" && -e "$graphing_icon") ]]; do
  printf "Please wait until required cloud data is syncing "
  sleep 1
  printf "."
  sleep 1
  printf "."
  sleep 1
  printf "."
  sleep 1
  printf "\r\e[K"
done
echo "All required cloud data available"

# create Duolingo.app with nativefier
if [[ ! -e "/Applications/Duolingo.app" ]]; then
  echo "### Duolingo.app installation"
  echo "Installing Duolingo.app with nativefier from https://www.duolingo.com/learn"
  nativefier -f -n "Duolingo" -i "$duolingo_icon" https://www.duolingo.com/learn || die "Creating Duolingo.app failed"
  mv "Duolingo-darwin-x64/Duolingo.app" /Applications/
  rm -rf "Duolingo-darwin-x64"
  echo
else
  echo "Skipped creation of Duolingo.app with nativefier"
fi

# create Graphing Calculator.app with nativefier
if [[ ! -e "/Applications/Graphing Calculator.app" ]]; then
  echo "### Graphing Calculator.app installation"
  echo "Installing Graphing Calculator.app with nativefier from https://www.desmos.com/calculator"
  nativefier -f -n "Graphing Calculator" -i "$graphing_icon" https://www.desmos.com/calculator || die "Creating Graphing Calculator.app failed"
  mv "Graphing Calculator-darwin-x64/Graphing Calculator.app" /Applications/
  rm -rf "Graphing Calculator-darwin-x64"
  echo
else
  echo "Skipped creation of Graphing Calculator.app with nativefier"
fi

# create WhatsAppWeb.app with nativefier
if [[ ! -e "/Applications/WhatsApp Web.app" ]]; then
  echo "### Whatsapp Web.app installation"
  echo "Installing Whatsapp Web.app with nativefier from http://web.whatsapp.com/"
  nativefier -f -n "WhatsApp Web" http://web.whatsapp.com/ || die "Creating Whatsapp Web.app failed"
  mv "WhatsApp Web-darwin-x64/WhatsApp Web.app" /Applications/
  rm -rf "WhatsApp Web-darwin-x64"
  echo
else
  echo "Skipped creation of Whatsapp Web.app with nativefier"
fi

# create Trading212.app with nativefier
if [[ ! -e "/Applications/Trading212.app" ]]; then
  echo "### Trading212.app installation"
  echo "Installing Trading212.app with nativefier from https://www.trading212.com/"
  nativefier -f -i "$trading_icon" --inject "$trading_script" -n "Trading212" https://www.trading212.com/ || die "Creating Trading212.app failed"

  mv "Trading212-darwin-x64/Trading212.app" /Applications/ || die "Moving to /Applications/ failed"
  rm -rf "Trading212-darwin-x64"

  mainpath="/Applications/Trading212.app/Contents/Resources/app/lib/main.js"
  if [[ -e "$mainpath" ]]; then
    mainjs=$(cat "$mainpath")
    lineToInsert=$(echo "$mainjs" | grep -n "mainWindow.webContents.on('will-navigate', onWillNavigate);" | awk '{ print $1 + 0; }') #5335
    line='  mainWindow.webContents.on("did-finish-load", function () { setTimeout(function () { mainWindow.webContents.send("loadListener"); }, 10000); })'
    if [[ -n $lineToInsert ]]; then
      echo "$mainjs" | sed -n "1,${lineToInsert}p" > "${mainpath}"
      echo "$line" >> "${mainpath}"
      echo "$mainjs" | sed -n "${lineToInsert},\$p" >> "${mainpath}"
      echo "Successfully injected listener call!"
    else
      echo "Failed to fetch listener insertion location. Please insert manually: $line"
      echo "mate -l '5306' \"$mainpath\" # location with nativefier 7.6.4: mainWindow.webContents.on('will-navigate', onWillNavigate);"
    fi

    appdir=$(dirname "$mainpath")
    pushd "$appdir/.." &>/dev/null || die "cd to $appdir/.. failed"
    npm i --save ws || die "npm install ws failed"
    popd &>/dev/null || die "cd failed"
    echo
  else
    echo "Failed to insert listener script call function. File not found: $mainpath"
  fi

else
  echo "Skipped creation of Trading212.app with nativefier"
fi

####################################################
### Manual part
####################################################
# In this part, the script is just instructing, at most helping out a bit
supersection "Manual part"

if hash it2check &> /dev/null && ! it2check; then
  letRead "Let's switch to iTerm!"
  open /Applications/iTerm.app/ || die "Please install iTerm and restart the script to continue"
  exit
else
  echo "Skipped iTerm switch"
fi

if [[ ! -e /Applications/Microsoft\ PowerPoint.app/ ]]; then
  letRead "Install Microsoft Office"
  open https://www.microsoft.com/education/products/office
  pressEnterTo
fi

section "Logins"
echo "Please login to following applications:"

if [[ ! -e "$HOME/Library/Application Support/Spotify/prefs" ]]; then
  letRead "  - Spotify"
  open /Applications/Spotify.app/ || die "Please install Spotify and restart the script to continue"
  pressEnterTo
else
  echo "Skipped Spotify login"
fi

if [[ ! -e "$HOME/Library/Containers/com.microsoft.onenote.mac" ]]; then
  letRead "  - OneNote"
  open /Applications/Microsoft\ OneNote.app/ || die "Please install OneNote and restart the script to continue"
  pressEnterTo
else
  echo "Skipped OneNote login"
fi

if [[ ! -e "$HOME/Library/Containers/com.atlassian.trello" ]]; then
  letRead "  - Trello (use the opportunity to set global shortcut to cmd+alt+t !)"
  open /Applications/Trello.app/ || die "Please install Trello and restart the script to continue"
  pressEnterTo
else
  echo "Skipped Trello login"
fi

if [[ ! -e "$HOME/Library/Preferences/com.electron.duolingo.plist" ]]; then
  letRead "  - Duolingo"
  open /Applications/Duolingo.app/ || die "Please install Duolingo with nativfier and restart the script to continue"
  pressEnterTo
else
  echo "Skipped Duolingo login"
fi

section "Settings"

current_dockitems=$(defaults read com.apple.dock | grep "\"file-label\" =" | sed 's/                "file-label" = //g;s/;//g')
dockitems=$(pass dockitems)
if [[ "$current_dockitems" != "$dockitems" ]]; then
  letRead "Arrange the Dock with the following items in the given order:"
  open /Applications/
  letRead "$dockitems"
  pressEnterTo
else
  echo "Skipped Dock arrangement"
fi

if [[ ! -e "$HOME/Library/Application Support/TextMate/Managed/Bundles" ]]; then
  letRead "Go to Textmate Preferences and install bundles as you like."
  open /Applications/TextMate.app/ || die "Please install TextMate and restart the script to continue"
  pressEnterTo
else
  echo "Skipped Textmate bundles"
fi

if ls "$templates"/*.potx &>/dev/null && [[ -e /Applications/Microsoft\ PowerPoint.app/ ]]; then
  # maybe also available via: defaults read | grep /Templates.localized | grep Normal
  if pot_target=$(echo ~/Library/Group\ Containers/*.Office/User\ Content.localized/Templates.localized) 2>/dev/null; then
    if ! ls "$pot_target"/*.potx >/dev/null; then
      echo "Copying Power Point templates to $pot_target"
      cp "$templates"/*.potx "$pot_target" || die "Copying Power Point templates failed"
    else
      echo "Skipped Power Point template copying, because they exist already"
    fi
  else
    letRead "Please find the correct Power Point templates folder. Maybe you have to start and log in first.
Was at: ~/Library/Group\ Containers/*.Office/User\ Content.localized/Templates.localized"
    pressEnterTo
  fi
else
  echo "Skipped Power Point template copying. Power Point not installed or no template found at ${templates}"
fi

if ! firefox_profile=$(echo ~/Library/Application\ Support/Firefox/Profiles/*.default) 2>/dev/null; then
  open /Applications/Firefox.app || die "Please install Firefox and restart the script to continue" # creates a profile
  letRead "Did not found the firefox bookmark folder. Starting Firefox now."
  pressEnterTo
fi
howtorestorebackup="https://support.mozilla.org/en-US/kb/restore-bookmarks-from-backup-or-move-them\#w_restoring-from-backups"
if ! firefox_profile=$(echo ~/Library/Application\ Support/Firefox/Profiles/*.default) 2>/dev/null; then
  letRead "Did not found bookmarks folder again. Import bookmarks manually from: $firefox_bookmark_backup"
  echo "$howtorestorebackup"
  pressEnterTo
else
  if [[ -z $(ls -A "$firefox_profile/bookmarkbackups") ]]; then
    if [[ -f "$firefox_bookmark_backup" ]]; then
      letRead "Copying bookmarks backup into Firefox Bookmark folder: $firefox_profile/bookmarkbackups"
      cp "$firefox_bookmark_backup" "$firefox_profile/bookmarkbackups/"
      echo "$howtorestorebackup"
      pressEnterTo
      letRead "Install extensions:"
      cat "$IT"/Firefox/extensions
      pressEnterTo
      letRead "Import extensions settings"
      open "$IT"/Firefox/
      pressEnterTo
    else
      echo "WARNING: Firefox has no bookmarks yet, but no bookmark backup found: $firefox_bookmark_backup"
    fi
  else
    echo "Skipped copying firefox bookmarks, and guided extension installation"
  fi
fi

safari_bookmarks_file="$HOME/Library/Safari/Bookmarks.plist"
if [[ ! -e "$safari_bookmarks_file" ]]; then
  letRead "Install Safari bookmarks"
  if [[ -f "$safari_bookmark_backup" ]]; then
    safari_dir=$(dirname "$safari_booksmarks_file")
    cp "$safari_bookmark_backup" "$safari_dir"
  else
    echo "WARNING: No Safari bookmark backup found: $safari_bookmark_backup"
  fi
else
  echo "Skipped installing Safari bookmarks"
fi

if [[ ! -e ~/Library/Containers/com.rockysandstudio.Newsflow ]]; then
  letRead "Import in Newsflow the OPML: $newsflow_opml_backup"
  open /Applications/Newsflow.app/ || die "Please install Newsflow and restart the script to continue"
  pressEnterTo
else
  echo "Skipped Newsflow OPML import"
fi

section "Final"
if [[ -n "$failedcasks" ]]; then
  echo "# Some brew casks failed to install. Retry installing them later:"
  for cask in $failedcasks; do
    echo "    brew install $cask"
  done
  echo
fi
if hash mas &>/dev/null && [[ -n "$failedapps" ]]; then
  echo "# Some apps failed to install. Retry installing them later:"
  for app in $failedapps; do
    echo "    mas install $app"
  done
  echo
fi
if [[ -n "$failedformulas" ]]; then
  echo "# Some brew formulas failed to install. Retry installing them later:"
  for formula in $failedformulas; do
    echo "    brew install $formula"
  done
  echo
fi
if [[ -n "$failedpackages" ]]; then
  echo "# Some python packages failed to install. Retry installing them later:"
  for formula in $failedpackages; do
    echo "    pip install $failedpackages"
  done
  echo
fi

echo 'Last settings:
### Settings
  - System settings
  - Flux setup
  - Firefox settings
  - Safari settings
  - Application shortcuts

And last but not least, you might think of installing
  - Adobe Pro (contains key)
  - Microsoft Office ([https://www.microsoft.com/en-us/education/products/office])
  - wine (jardinains, siedler5, finale, ...)
  - FreeFileSync ([https://freefilesync.org/download.php])
  - Audacity ([https://www.audacityteam.org/download/mac/])
  - FileZilla ([https://filezilla-project.org/download.php?type=client])
  - MenuMeters (e.g. [https://github.com/yujitach/MenuMeters])'

echo
supersection "The End"
popd &> /dev/null
