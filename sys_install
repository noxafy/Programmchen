#!/bin/bash

thisdir=$(dirname "$PWD/$BASH_SOURCE")
if [[ ! -e $thisdir ]]; then
  thisdir=$(dirname "$BASH_SOURCE")
fi
usage="\e[1msys_install\e[0m -h | [-nb]"
help="An install script for computer reset.
$usage
	\e[1m-h\e[0m	Displays this message and exists.
	\e[1m-s\e[0m	Skip brew installs, brew cask installs and mas installs.
	
Warning: Leave in place!
"

#resources
keylayouts="Keyboard Layouts" # keyboard layouts
trading_icon="$IT/trading212.icns" # icon for Trading212.app
dashboard="$thisdir/dashboard" # Dashboard widgets
# adobe installer
# thunderbird folder
# intellij folder
# minecraft
# IdeaProjects Documents Pictures Music
# power point draft uniwue
# wifi data (save in pass?)

brews=(agedu
aspell
bash
bash-completion
bash-snippets
brightness
bro
chordii
chromedriver
cloc
darksky-weather
diff-pdf
expect
fd
ffmpeg
fortune
geoipupdate
git
go
googler
hexedit
howdoi
lorem
#mas #already installed
maven
maven-completion
mplayer
mujs
mysql
nativefier
#pass
pdfgrep
pick
pup
recode
shpotify
testdisk
wget
wiki
wine
winetricks
you-get
youtube-dl)

brewcasks=(android-file-transfer
android-sdk
android-studio
anki
axure-rp
betterzipql
calibre
disablemonitor
#dropbox #already installed
firefox
flux
freefilesync
freemind
geogebra
google-chrome
google-earth-pro
intellij-idea
iterm2
java
jwzlyrics
mactex
mpv
notational-velocity
osxfuse
qlimagesize
qlstephen
soundflower
spotify
telegram
texstudio
the-unarchiver
thunderbird
ukelele
xquartz)

masinstalls=(890805912 # Newsflow
#497799835 # XCode, requirement of mas
1061963639 # VirtualDJ 8
408981434 # iMovie
1247301872 # Logoist 3
595191960 # CopyClip
526298438 # Lightshot Screenshot
404010395 # TextWrangler
1278508951 # Trello
)

skipauto=""
case $1 in
  -h)
    printf "$help"
    exit 0
    ;;
  -s)
    skipauto=true
    ;;
  -*)
    printf "Wrong argument: %s\n$usage -- See -h for more help.\n" "$1"
    exit 1
    ;;
esac

####################################################
### Function declarations
####################################################

die() {
  echo "ERROR: $*!" >&2
  exit 1
}

c() {
  while [[ -n $1 ]]; do
    origin="$thisdir/$1"
    if [[ ! -e "$origin" ]]; then
      echo "WARNING: Requested file or dir not available: $origin"
      continue;
    fi
    target="$PWD/$1"
    printf "Copying $origin to $target"
    printf "($(du -sh "$origin" | awk '{print $1}')) ...\n"
    cp -a "$origin" "$target" || die "Copying $origin to $target failed!"
    shift
  done
}

installWifi() {
  ssid=$1
  passwd=$2
  while [[ -z "$ssid" ]]; do
    echo "Available networks (WPA2 only):"
    networks=$(/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport -s)
    echo "$networks" | sed -n 1p
    echo "$networks" | grep "WPA2"
    read -p "Please enter a SSID to connect to (WPA2 only; s = search again all available): " ssid
    if [[ "$ssid" = s ]]; then
      ssid=
    fi
    if [[ -z $(echo "$networks"  | awk '{print $1}' | grep -- "^${ssid}\$") ]]; then
      echo "Network \"$ssid\" is not available."
      ssid=
    fi
  done
  if [[ -n $(networksetup -listpreferredwirelessnetworks en0 | grep -- "^[[:space:]]*${ssid}\$") ]]; then
    printf "%s already installed!\n" "$ssid"
    return;
  fi
  while [[ -z "$passwd" ]]; do
    read -p "Please enter the password for $ssid: " passwd
  done
  networksetup -addpreferredwirelessnetworkatindex Airport "$ssid" 0 WPA2 "$passwd"
}

waitUser() {
  if [[ -n "$*" ]]; then
    echo "$*"
    sleep 2
  fi
  read -p "Press [Enter] to continue: " trash
  #printf "\e[A\r\e[K"
}

tell() {
  echo "####################################################"
  echo "### $*"
  echo "####################################################"
}

####################################################
### Partly automatic part
####################################################
tell "Partly automatic part"
echo

#go home first
pushd "$HOME" &> /dev/null || die "cd to $HOME failed!"

# check, if .bash_profile is installed
if [[ -z "$IT" ]]; then
  tell "Preferences installation"
  # if not, install it and the other shit
  c .bash_profile .m2/settings.xml .tm_properties .ssh .password-store .gnupg
  #keyboard layout
  cd "Library" || die "cd to $HOME/Library failed!"
  c "$keylayouts" # - keyboard layout
  
  #install terminal layouts
  open "$thisdir/*.terminal"
  #let user choose layout and restart terminal & install script
  echo "Please close this window now and start this script again with you favourite terminal layout."
  printf "\e[4mHint\e[0m: Just set it to standard layout.\n"
  printf "\e[4mHint2\e[0m: Activate secure text entry.\n"
  printf "\e[4mHint3\e[0m: At this point, you can also switch keyboard layout as desired. "
  waitUser
  echo "Now."
  exit 0
else
  echo "Skipped preferences installation."
fi

# install internet
ping -t 3 -c 1 google.com 2> /dev/null 1> /dev/null
if [[ $? -ne 0 ]]; then #first time. no internet installed
  tell "Internet connection installation"
  ping -t 3 -c 1 google.com #TODO: deleteme
  networksetup -setairportpower en0 on
  #wlan login
  installWifi adnet #pass not installed yet, so paste password here before running
  #AEG
  printf "Turning Wi-Fi off ..."
  networksetup -setairportpower en0 off
  echo " and on ..."
  networksetup -setairportpower en0 on
  sleep 3
  ping -t 3 -c 1 google.com 2> /dev/null 1> /dev/null
  if [[ $? -ne 0 ]]; then
    echo "Auto connection failed. Please select the network from menu bar."
    echo "This script will continue as soon as an internet connection is found."
    ping -t 3 -c 1 google.com 2> /dev/null 1> /dev/null
    while [[ $? -ne 0 ]]; do
      sleep 1
      ping -t 3 -c 1 google.com 2> /dev/null 1> /dev/null
    done
  fi
else
  echo "Skipped internet installation."
fi

# install dashboard apps
if [[ -d "$dashboard" ]]; then
  tell "Dashboard app installation"
  c dashboard
  cd "dashboard"
  for wgt in *; do
    open "$wgt"
    waitUser "Install: $wgt"
  done
  cd ".."
  rm -rf dashboard
else
  echo "Skipped Dashboard apps (no \"dashboard\" directory available at $thisdir)"
fi

# install homebrew
if [[ -z $(which brew) ]]; then
  echo "Installing Homebrew ..."
  /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)" || die "Installing brew failed."
  echo "Tapping caskroom ..."
  brew tap caskroom/cask || die "brew tap caskroom/cask failed."
else
  echo "Skipped brew installation."
fi

# install dropbox
if [[ ! -e /Applications/Dropbox.app/ ]]; then
  #brew install dropbox
  tell "Dropbox installation"
  brew cask install dropbox || die "brew cask install dropbox failed!"
  #log in dropbox
  open /Applications/Dropbox.app/
  waitUser "Please log in to dropbox!" #deps in Programmchen now available
else
  echo "Skipped dropbox installation."
fi

#install adobe, contains key
#install microsoft programs, user gui login
#install xcode

if [[ -z $(which mas) ]]; then
  tell "mas installation"
  brew install mas || die "brew install mas failed."
  if [[ -z $(mas account) ]]; then
    mas signin --dialog 
    waitUser "Please sign in to App Store"
  fi
  echo "mas account: $(mas account)"
else
  echo "Skipped mas installation."
fi

if [[ -z $(which pass) ]]; then
  tell "pass installation"
  brew install pass || die "brew install pass failed."
else
  echo "Skipped pass installation."
fi

#open app store for apple id
#xcode-select --install ?

#IntelliJ config folder
#install intelliJ

# install other wifis
# pass SSID | sed -n '2,$p' | awk '{$1=""; print $0}'

# ensure required dropbox content synced
if [[ -e "$trading_icon" ]]; then
  echo
  echo "All required dropbox data available."
else
  while [[ ! -e "$trading_icon" ]]; do
    printf "Please wait until required dropbox data is synced "
    sleep 1
    printf "."
    sleep 1
    printf "."
    sleep 1
    printf "."
    sleep 1
    printf "\r\e[K"
  done
fi

echo
####################################################
### Full automatic part (place as much as possible here)
####################################################
tell "Full automatic part"
echo

if [[ ! $skipauto ]]; then
#app store
if [[ -z $(mas account) ]]; then
  open /Applications/App\ Store.app/
  waitUser "Please sign in to App Store"
fi
tell "App Store apps installation"
failedapps=""
masls=$(mas list | awk '{print $1}')
for app in ${masinstalls[@]}; do
  if [[ -z $(echo "$masls" | grep $app) ]]; then
    echo "Installing $cask ..."
    mas install $app
    if [[ $? -ne 0 ]]; then
      echo "Failed installing $app $(mas info $app | sed -n 1p)"
      failedapps+="$app "
    fi
  else
    echo "Skipped already installed app: $app"
  fi
done
if [[ -n "$failedapps" ]]; then
  echo "Retry following app installs:"
  for app in $failedapps; do
    echo "mas install $app"
  done
else
  echo "All apps installed with no obvious problems."
fi
echo


tell "brew cask installs"
#brew cask install
failedcasks=
echo "Looking up installed brew casks ..."
brewcaskls=$(brew cask ls)
for cask in ${brewcasks[@]}; do
  if [[ -z $(echo "$brewcaskls" | grep $cask) ]]; then
    echo "Installing cask $cask ..."
    brew cask install $cask
    if [[ $? -ne 0 ]]; then
      echo "Failed installing $cask"
      failedcasks+="$cask "
    fi
  else
    echo "Skipped already installed cask: $cask"
  fi
done
if [[ -n "$failedcasks" ]]; then
  echo "Retry following cask installs:"
  for cask in $failedcasks; do
    echo "brew cask install $cask"
  done
else
  echo "All casks installed with no obvious problems."
fi
echo

#brew install
tell "brew installs"
failedformulas=
echo "Looking up installed brew formulas ..."
brewls=$(brew ls)
for formula in ${brews[@]}; do
  if [[ -z $(echo "$brewls" | grep $formula) ]]; then
    echo "Installing formula $formula ..."
    brew install $formula
    if [[ $? -ne 0 ]]; then
      echo "Failed installing $formula"
      failedformulas+="$formula "
    fi
  else
    echo "Skipped already installed formula: $formula"
  fi
done
if [[ -n "$failedformulas" ]]; then
  echo "Retry following formula installs:"
  for formula in $failedformulas; do
    echo "brew install $formula"
  done
else
  echo "All formulas installed with no obvious problems."
fi
echo

#create WhatsApp and Trading212 app with nativefier
if [[ ! -e "/Applications/WhatsApp Web.app" ]]; then
  tell "Whatsapp Web.app installation"
  echo "Installing Whatsapp Web.app with nativefier from http://web.whatsapp.com/"
  nativefier -n "WhatsApp Web" "http://web.whatsapp.com/" || die "Creating Whatsapp Web.app failed."
  mv "WhatsApp Web-darwin-x64/WhatsApp Web.app" /Applications/
  rm -rf WhatsApp Web-darwin-x64/
else
  echo "Skipped creation of Whatsapp Web.app with nativefier."
fi

if [[ ! -e "/Applications/Trading212.app" ]]; then
  tell "Trading212.app installation"
  echo "Installing Trading212.app with nativefier from https://www.trading212.com/"
  nativefier -i "$trading_icon" -n "Trading212" 'https://www.trading212.com/' || die "Creating Trading212.app failed."
  
  # Remove context menu
  mainpath="Trading212-darwin-x64/Trading212.app/Contents/Resources/app/lib/main.js"
  if [[ -e "$mainpath" ]]; then
    mainjs=$(cat "$mainpath")
    contextmenustart=$(echo "$mainjs" | grep -n "_electron.ipcMain.on('contextMenuOpened', function (event, targetHref) {" | awk '{ print $1 + 0; }') # 6893
    contextmenuend=$(echo "$mainjs" | grep -n 'mainWindow.contextMenuOpen = true;' | awk '{ print $1 + 1; }') # 6928
    if [[ -n $contextmenustart && -n $contextmenuend ]]; then
      echo "$mainjs" | sed "${contextmenustart},${contextmenuend}d" > "$mainpath"
      echo "Successfully removed context menu (sed '${contextmenustart},${contextmenuend}d')"
    else
      echo "Failed to fetch context menu location. Please remove context menu initialization manually."
      echo "mate -l '6893-6928' "$mainpath" # location with nativefier 7.6.1; leave surrounding 'function initContextMenu(mainWindow) {'"
    fi
  else
    echo "Failed to remove context menu. File not found: $mainpath"
  fi
  
  mv "Trading212-darwin-x64/Trading212.app" /Applications/ || die "Moving to /Applications/ failed."
  rm -rf Trading212-darwin-x64/
else
  echo "Skipped creation of Trading212.app with nativefier."
fi
else
  echo "Skipped brew installs, brew cask installs and mas installs."
fi

#Thunderbird folder
#IdeaProjects
#other files (documents, pictures, music)
#place minecraft in /Applications
#copy power point draft uniwue

echo
####################################################
### Manual part
####################################################
tell "Manual part"
echo

#one time prefs
bash4=/usr/local/bin/bash
if [[ -f $bash4 && -z $(cat /etc/shells | grep $bash4) ]]; then
  echo "Changing to login shell to $bash4"
  sudo bash -c 'echo $bash4 >> /etc/shells' || die "Adding $bash4 to /etc/shells failed."
  chsh -s $bash4 || die "Changing users default shell failed."
  echo "Please close this window now and start this script again."
  waitUser
  echo "Now."
  exit 0
else
  echo "Skipped login shell change."
fi

# - Dock: Finder, Not, th, f, Spotify, note, newsflow, audcity, idea, lightshot, prefs, terminal, FileMerge
# - notational velocity: ~/Dropbox/Org/Notational/
# - spotify login
# - one note login, ggf Excel, Word, PowerPoint
# - import firefox bookmarks
# - calender login google
# - import newsflow opml
# - os shortcuts
# - install "RZUWsec"
# - wine installs (jardinains, siedler5, finale)

popd &> /dev/null
