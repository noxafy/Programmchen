#!/bin/bash

usage="\e[1msys_install\e[0m -h | [-s]"
help="An install script for mac reset.
$usage
	\e[1m-h\e[0m	Displays this message and exists.

Fast internet connection recommended.
Warning: Leave in place!
"

########################################################################################################
##### Args parsing
########################################################################################################

# TODO: Divide full and slim install
case $1 in
  -h)
    printf "$help"
    exit 0
    ;;
  -*)
    printf "Wrong argument: %s\n$usage -- See -h for more help.\n" "$1"
    exit 1
    ;;
esac

########################################################################################################
##### Variables
########################################################################################################

thisdir=$(dirname "$PWD/$BASH_SOURCE")
if [[ ! -e $thisdir ]]; then
  thisdir=$(dirname "$BASH_SOURCE")
fi

# dirs
nv_directory="$D/Apps/NV"
studium="$D/Org/Studium"
# resources
trading_icon="$IT/212/trading212.icns" # icon for Trading212.app
trading_script="$IT/212/212listener.js" # listener for Trading212.app
firefox_bookmark_backup="$thisdir/files/firefox_bookmark.jsonlz4"
newsflow_opml_backup="$thisdir/files/Newsflow Subscriptions.xml"
iterm_settings="$P/Prefs/com.googlecode.iterm2.plist"

dockitems='nvALT
Wunderlist
Simplenote
Thunderbird
Firefox
Spotify
"Microsoft OneNote"
Newsflow
Audacity
"IntelliJ IDEA"
FreeFileSync
"System\\U00adeinstellungen"
iTerm
FileMerge
Trello
Anki
BibDesk
FileZilla'

brews=(
  brightness
  cloc
  diff-pdf
  fd
  fortune
  fzf
  git
  howdoi
  lsd
  nano
  pdfgrep
  pup
  recode
  ripgrep
  rsync
  testdisk	# Powerful free data recovery utility
  wget
  wiki
)

brews+=(
#agedu		# Unix utility for tracking down wasted disk space
#aspell
#automake
bash
bash-completion
bash-snippets
bfg
#bro		# Network security monitor
#chafa		# Versatile and fast Unicode/ASCII/ANSI graphics renderer
#cheat		# Better version contained in bash snippets
#chordii
#chromedriver
#coreutils
#exiftool
#expect		# Program that can automate interactive applications
#fasttext	# Library for fast text representation and classification
#ffmpeg #Required by audacity or mplayer?
#freeling	# Suite of language analyzers
#fswatch
gcal
#geoipupdate
go
#gobject-introspection
googler
hexedit
#launch4j   # Cross-platform Java executable wrapper
lf
lorem
#mas #already installed
maven
maven-completion
mplayer
#mujs
mysql
nativefier
#pass #already installed
plan9port
#python@2 #someone depending on this?
rename
shpotify
#sic		# Minimal multiplexing IRC client
tldr		# Simplified and community-driven man pages
trash		# CLI tool that moves files or folder to the trash
#wine
#winetricks
woff2
#you-get
youtube-dl)

brewcasks=(
  anki
  disablemonitor
  #dropbox #already installed
  firefox
  flux
  font-hack-nerd-font
  freefilesync
  go2shell
  google-chrome
  iterm2
  qlstephen
  textmate
  the-unarchiver
)

brewcasks+=(android-file-transfer
#android-sdk
#android-studio
#axure-rp
bibdesk
#blender
calibre
#docker
#freemind
geogebra
google-earth-pro
intellij-idea
java
#jwzlyrics
mactex
#mp3tag
mpv
#notational-velocity
nvalt
#onedrive
#openoffice
#osxfuse #maybe needed for plugging the external drive?
#sketch
skype
soundflower
spotify
#teamviewer
telegram
texstudio
thunderbird
ukelele
xquartz)

masinstalls=(
### Free
1278508951 # Trello
)

masinstalls+=(
### Free
890805912 # Newsflow
595191960 # CopyClip
#404010395 # TextWrangler
1061963639 # VirtualDJ 8
692867256 # Simplenote
410628904 # Wunderlist

### Apple
#497799835 # XCode, already required by mas
408981434 # iMovie
409183694 # Keynote
409201541 # Pages
409203825 # Numbers

### paid
1247301872 # Logoist 3
634148309 # Logic Pro X
424389933 # Final Cut Pro
634159523 # MainStage 3
434290957 # Motion
424390742 # Compressor
)

#variables
def_ssid=
def_password=
wlan_device=en0

########################################################################################################
##### Helper functions
########################################################################################################

die() {
  echo "ERROR: $*!" >&2
  exit 1
}

c() {
  if [[ $1 == "-s" ]]; then
    sudo=true
    shift
  else
    sudo=
  fi
  while [[ -n $1 ]]; do
    origin="$thisdir/$1"
    shift
    if [[ ! -e "$origin" ]]; then
      echo "WARNING: Requested file or dir not available: $origin"
      continue;
    fi
    target="$PWD/$1"
    if [[ -d "$target" && "$origin" == */ ]]; then
      printf "Copying contents of $origin to $target"
    else
      #rm -f "$target" &> /dev/null
      printf "Copying folder $origin to $target"
    fi
    printf " ($(du -sh "$origin" | awk '{print $1}')) ...\n"
    if [[ -n $sudo ]]; then
      sudo cp -a "$origin" "$target" || die "Copying $origin to $target failed!"
    else
      cp -a "$origin" "$target" || die "Copying $origin to $target failed!"
    fi
  done
}

installWifi() {
  ssid=$1
  passwd=$2
  while [[ -z "$ssid" ]]; do
    networks=$(/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport -s)
    echo "Available networks (WPA2 only):"
    echo "$networks" | sed -n 1p
    echo "$networks" | grep "WPA2"
    read -p "Please enter a SSID to connect to (s = search again all available): " ssid
    if [[ -z "$ssid" ]]; then
      echo "The SSID must not empty to connect to the internet."
    elif [[ "$ssid" = s ]]; then
      ssid=
    elif [[ -z $(echo "$networks"  | awk '{print $1}' | grep -- "^${ssid}\$") ]]; then
      echo "Network \"$ssid\" is not available."
      ssid=
    fi
  done
  if [[ -n $(networksetup -listpreferredwirelessnetworks "$wlan_device" | grep -- "^[[:space:]]*${ssid}\$") ]]; then
    printf "%s already installed!\n" "$ssid"
    return;
  fi
  while [[ -z "$passwd" ]]; do
    read -p "Please enter the password for $ssid: " passwd
  done
  networksetup -addpreferredwirelessnetworkatindex "$wlan_device" "$ssid" 1000 WPA2 "$passwd"
}

letRead() {
  if [[ -n "$*" ]]; then
    echo "$*"
     sleep $(echo "scale=3;${#1}/40+0.36" | bc)
  fi
}

pressEnterTo() {
  local message;
  if [[ -n "$1" ]]; then
    message=$1
  else
    message="continue"
  fi
  read -p "Please press [Enter] to ${message}: " trash
  #printf "\e[A\r\e[K"
}

section() {
  echo "#########################"
  echo "### $*"
  echo "#########################"
}

supersection() {
  echo "####################################################"
  echo "####################################################"
  echo "### $*"
  echo "####################################################"
  echo "####################################################"
}

########################################################################################################
##### Partly automatic part
########################################################################################################
# In this part, the script can do mostly on its own, but needs hands-on from time to time
supersection "Partly automatic part"
echo

#go home first
pushd "$HOME" &> /dev/null || die "cd to $HOME failed!"

# check if .profile has been executed
if [[ -z "$IT" ]]; then # $IT is required by script
  section "Preferences installation"

  # install .profile's as root
  c -s .bashrc .profile .profile_public .zshrc
  # install the other shit
  if [[ ! -d .m2 ]]; then
    mkdir .m2 || die "mkdir $HOME/.m2 failed!"
  fi
  c .nanorc .m2/settings.xml .tm_properties .ssh .password-store .gnupg

  #install terminal layouts
  open "$thisdir/*.terminal"

  #keyboard layout
  pushd "$HOME/Library" &> /dev/null || die "cd to $HOME/Library failed!"
  c "Keyboard Layouts/" # - keyboard layout

  # copy dictionaries
  c "Dictionaries/"
  popd &> /dev/null

  # TODO
  # install fonts (from Word as well?)

  #defaults write com.apple.Siri StatusMenuVisible 0 #use siri in status bar as reminder of deactivating it

  #print all defaults, major unreadable values filtered out
  #defaults read | grep -v "AppleIDAgentMetaInfo" | grep -v "AppleIDAccount" | grep -v 'FZPersonPictureData' | grep -v 'pref:200:Machine Preferences' \
  # | grep -v 'FZPersonSmallPictureData' | grep -v 'FZPersonPictureData' | grep -v "iTunes Location" | grep -v 'ProcessViewerColumns' | grep -v '\\Ud83c' \
  # | grep -v 'FFNamingPresets' | grep -v 'FFMediaImportOrganizerFilmListView' | grep -v 'timeFormatLK' | grep -v 'FFShareDestinationsKey' \
  # | grep -v 'folderActions' | grep -v 'LibraryBookmark' | grep -v 'IPXDefaultLibraryURLBookmark' | grep -v 'IPXDefaultWorkspace' \
  # | grep -v 'Data =' | grep -v 'WebKitUserStyleSheetLocationPreferenceKey' | grep -v 'TTInspectorProcesses' | grep -v 'TextBoldColor' \
  # | grep -v 'BackgroundColor' | grep -v 'CursorColor' | grep -v 'SelectionColor' | grep -v 'TextColor' | grep -v 'book =' | grep -v 'DVTRecentColors' \
  # | grep -v CacheBag | grep -v 'file-bookmark' | grep -v 'TSWPInvisiblesColor' | grep -v 'FFMediaImportOrganizerFilmListView' \
  # | grep -v 'pref:130:Preferences' | grep -v 'eqps:129:EQPreset' | grep -v 'services =' | grep -v 'GarageBand' | grep -v 'weather =' \
  # | grep -v 'UserCrossfade' | grep -v 'BookmarkData' | grep -v 'kBookmarkDataKey' | grep -v 'FFShareDestinationsKey' | grep -v 'KeyBingingTable' \
  # | grep -v 'MacAppStoreReceiptData_11.0' | grep -v 'LoginItemsColumn2' | grep -v ' req = ' | grep -v 'LogicBinaryPreferences' | grep -v 'CachedBag'
  # parse output to command
  # sed 's/= //g;s/;//g;s/"/defaults -currentHost write -g /;s/"//'
  # sed 's/= //g;s/;//g;s/ *"*/defaults write /;s/"//'

  # trackpad prefs
  # "Apple Global Domain" = {
  echo "Mouse and Trackpad settings."
  defaults -currentHost write -g com.apple.mouse.tapBehavior 1
  defaults -currentHost write -g com.apple.trackpad.enableSecondaryClick 1
  defaults -currentHost write -g com.apple.trackpad.fiveFingerPinchSwipeGesture 2
  defaults -currentHost write -g com.apple.trackpad.fourFingerHorizSwipeGesture 2
  defaults -currentHost write -g com.apple.trackpad.fourFingerPinchSwipeGesture 2
  defaults -currentHost write -g com.apple.trackpad.fourFingerVertSwipeGesture 2
  defaults -currentHost write -g com.apple.trackpad.momentumScroll 1
  defaults -currentHost write -g com.apple.trackpad.pinchGesture 1
  defaults -currentHost write -g com.apple.trackpad.rotateGesture 1
  defaults -currentHost write -g com.apple.trackpad.scrollBehavior 2
  defaults -currentHost write -g com.apple.trackpad.threeFingerDragGesture 0
  defaults -currentHost write -g com.apple.trackpad.threeFingerHorizSwipeGesture 2
  defaults -currentHost write -g com.apple.trackpad.threeFingerTapGesture 2
  defaults -currentHost write -g com.apple.trackpad.threeFingerVertSwipeGesture 2
  defaults -currentHost write -g com.apple.trackpad.twoFingerDoubleTapGesture 1
  defaults -currentHost write -g com.apple.trackpad.twoFingerFromRightEdgeSwipeGesture 3
  # };

  echo "Dock settings."
  # "com.apple.dock" = {
  defaults write com.apple.dock autohide 1
  defaults write com.apple.dock largesize 55
  defaults write com.apple.dock magnification 1
  defaults write com.apple.dock minimize-to-application 1
  defaults write com.apple.dock orientation left
  defaults write com.apple.dock tilesize 42
  # }

  # Dictionary
  echo "Dictionary settings."
  defaults write com.apple.Dictionary "last available dictionaries" "(
    \"/System/Library/Frameworks/CoreServices.framework/Frameworks/DictionaryServices.framework/Resources/Wikipedia.wikipediadictionary\",
    \"$HOME/Library/Containers/com.apple.Dictionary/Data/Library/Dictionaries/Deutsch-Englisch.dictionary\",
    \"$HOME/Library/Containers/com.apple.Dictionary/Data/Library/Dictionaries/OpenThesaurus Deutsch.dictionary\",
    \"asset:/Oxford Dictionary of English.dictionary\",
    \"asset:/Traditional Chinese.dictionary\",
    \"asset:/The Standard Dictionary of Contemporary Chinese.dictionary\",
    \"asset:/Simplified Chinese - English.dictionary\",
    \"asset:/Danish.dictionary\",
    \"asset:/French.dictionary\",
    \"asset:/Hindi.dictionary\",
    \"asset:/Italian.dictionary\",
    \"asset:/Sanseido Super Daijirin.dictionary\",
    \"asset:/Sanseido The WISDOM English-Japanese Japanese-English Dictionary.dictionary\",
    \"asset:/Korean.dictionary\",
    \"asset:/Korean - English.dictionary\",
    \"asset:/Dutch.dictionary\",
    \"asset:/Dutch - English.dictionary\",
    \"asset:/Norwegian.dictionary\",
    \"asset:/Portuguese.dictionary\",
    \"asset:/Portuguese - English.dictionary\",
    \"asset:/Russian.dictionary\",
    \"asset:/Swedish.dictionary\",
    \"asset:/Spanish.dictionary\",
    \"asset:/Thai.dictionary\",
    \"asset:/Turkish.dictionary\",
    \"asset:/TTY Abbreviations Dictionary.dictionary\",
    \"/System/Library/Assets/com_apple_MobileAsset_DictionaryServices_dictionaryOSX/cd4d7cc1cd227a13d2b9c029f86c940f94b7543a.asset/AssetData/Apple Dictionary.dictionary\",
    \"/System/Library/Assets/com_apple_MobileAsset_DictionaryServices_dictionaryOSX/685cdc3ef70cf91c881f4c7c2e98c3f00ace218b.asset/AssetData/Oxford American Writer\'s Thesaurus.dictionary\",
    \"/System/Library/Assets/com_apple_MobileAsset_DictionaryServices_dictionaryOSX/975b56580ea4bbbe1d29ca14a3b5e1a81411c787.asset/AssetData/New Oxford American Dictionary.dictionary\",
    \"/System/Library/Assets/com_apple_MobileAsset_DictionaryServices_dictionaryOSX/2fcc349eb53d7c336b8372758b70508eb8e2ac0b.asset/AssetData/Oxford Thesaurus of English.dictionary\",
    \"asset:/Traditional Chinese - English.dictionary\",
    \"/System/Library/Assets/com_apple_MobileAsset_DictionaryServices_dictionaryOSX/59c252b96e44a6dbdc931e5b75a169f22eb6fa43.asset/AssetData/Duden Dictionary Data Set I.dictionary\",
    \"/System/Library/Assets/com_apple_MobileAsset_DictionaryServices_dictionaryOSX/2a679af89e5bb8b417ff02b0fef81ca39ffad9a5.asset/AssetData/German - English.dictionary\",
    \"/System/Library/Assets/com_apple_MobileAsset_DictionaryServices_dictionaryOSX/e5ccfe0082277d86bcac7e63268a21272f704c34.asset/AssetData/French - English.dictionary\",
    \"/System/Library/Assets/com_apple_MobileAsset_DictionaryServices_dictionaryOSX/d574b5371fbd293fe74c473f37a18fa300ecdc31.asset/AssetData/Italian - English.dictionary\",
    \"/System/Library/Assets/com_apple_MobileAsset_DictionaryServices_dictionaryOSX/60f594992693ff3f88af3f505da1451dc5af9c8c.asset/AssetData/Russian - English.dictionary\",
    \"/System/Library/Assets/com_apple_MobileAsset_DictionaryServices_dictionaryOSX/0c32ebe1de94a069aca537b10f718806c5ad50c1.asset/AssetData/Spanish - English.dictionary\"
  )"
  defaults write com.apple.DictionaryServices DCSActiveDictionaries "(
    \"/System/Library/Frameworks/CoreServices.framework/Frameworks/DictionaryServices.framework/Resources/Wikipedia.wikipediadictionary\",
    \"$HOME/Library/Containers/com.apple.Dictionary/Data/Library/Dictionaries/Deutsch-Englisch.dictionary\",
    \"$HOME/Library/Containers/com.apple.Dictionary/Data/Library/Dictionaries/OpenThesaurus Deutsch.dictionary\",
    \"com.apple.dictionary.AppleDictionary\",
    \"com.apple.dictionary.OAWT\",
    \"com.apple.dictionary.NOAD\",
    \"com.apple.dictionary.OTE\",
    \"com.apple.dictionary.de.DDDSI\",
    \"com.apple.dictionary.OxfordGerman\",
    \"com.apple.dictionary.OxfordFrench\",
    \"com.apple.dictionary.OxfordItalian\",
    \"com.apple.dictionary.OxfordSpanish\",
    \"com.apple.dictionary.OxfordRussian\"
  )"

  echo "Shortcuts settings."
  # defaults read | grep -A 5 NSUserKeyEquivalents
  defaults write com.apple.Preview NSUserKeyEquivalents '{ "Text hervorheben" = "@h"; }'
  defaults write com.apple.Terminal NSUserKeyEquivalents '{ "Standardgr\\U00f6\\U00dfe wiederherstellen" = "@$r"; }'
  defaults write com.apple.TextEdit NSUserKeyEquivalents '{ Einsetzen = "@v";
        "Einsetzen und Stil anpassen" = "@~^v";  }'
  defaults write com.microsoft.onenote.mac NSUserKeyEquivalents '{ "Einf\\U00fcgen" = "@$v";
        "Einf\\U00fcgen und an Formatierung anpassen" = "@v";
        "Sprache f\\U00fcr Korrekturhilfen festlegen..." = "@l"; }'
  defaults write org.audacityteam.audacity NSUserKeyEquivalents '{ "Audio exportieren ..." = "@$s"; }'

  echo "Various other settings."
  # Emoji & Symbole Palette
  defaults write com.apple.CharacterPaletteIM CVActiveCategories '(
    "Category-Emoji",
    "Category-Bullets",
    "Category-Pictographs",
    "Category-Latin",
    "Category-MathematicalSymbols",
    "Category-Arrows",
    "Category-CurrencySymbols",
    "Category-ParenthesesAll",
    "Category-PhoneticAlphabet",
    "Category-PunctuationAll",
    "Category-MusicalSymbols",
    "Category-DigitsAll",
    "Category-SignStandardSymbols",
    "Category-Greek",
    "Category-LetterlikeSymbolsAll",
    "Category-Unicode",
    "Category-ISO8859_1"
  )'

  # Disable creation of Metadata Files on Network and USB Volumes
  defaults write com.apple.desktopservices DSDontWriteNetworkStores 1
  defaults write com.apple.desktopservices DSDontWriteUSBStores 1

  defaults write -g AppleShowAllExtensions 1
  defaults write -g KeyRepeat 2
  defaults write -g InitialKeyRepeat 15

  #let user choose layout and restart terminal & install script
  echo "The computer will reboot now to apply the settings. After that, please start this script again."
  printf "\e[4mHint\e[0m: Just set your favourite terminal layout to default.\n"
  printf "\e[4mHint2\e[0m: Activate secure text entry.\n"
  printf "\e[4mHint3\e[0m: Switch keyboard layout as desired. (Maybe only after restart?)"
  pressEnterTo restart
  letRead "sudo shutdown -r now ..."
  sudo shutdown -r now
  exit 0
else
  echo "Skipped preferences installation."
fi

# install internet
ping -t 3 -c 1 8.8.8.8 >& /dev/null
if [[ $? -ne 0 ]]; then # no internet connection
  if [[ $(networksetup -listpreferredwirelessnetworks "$wlan_device" | wc -l) -le 1 ]]; then #first time; no internet installed
    section "Internet connection installation"
    networksetup -setairportpower "$wlan_device" on
    #wlan login
    installWifi "$def_ssid" "$def_password" #pass not installed yet, so paste password in prefs section (at top) before running
  else
    echo "No internet connection detected."
  fi
  #AEG
  printf "Turning Wi-Fi off ..."
  networksetup -setairportpower "$wlan_device" off
  echo " and on ..."
  networksetup -setairportpower "$wlan_device" on
  sleep 3
  ping -t 3 -c 1 8.8.8.8 >& /dev/null
  if [[ $? -ne 0 ]]; then
    echo "Auto connection failed. Please select the network from menu bar."
    echo "This script will continue as soon as an internet connection is found."
    ping -t 3 -c 1 8.8.8.8 >& /dev/null
    while [[ $? -ne 0 ]]; do
      sleep 1
      ping -t 3 -c 1 8.8.8.8 >& /dev/null
    done
  fi
else
  echo "Skipped internet installation."
fi

# install dashboard apps
if [[ -d "$thisdir/dashboard" ]]; then
  section "Dashboard app installation"
  c dashboard
  cd "dashboard"
  for wgt in *; do
    letRead "Please install: $wgt"
    open "$wgt"
    pressEnterTo
  done
  cd ".."
  rm -rf dashboard
else
  echo "Skipped Dashboard apps (no directory \"dashboard\" available at $thisdir)"
fi

# bash4=/usr/local/bin/bash
# if [[ -f "$bash4" && "$SHELL" != "$bash4" ]]; then
if [[ ! -d "$ZSH" ]]; then
  sh -c "$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"

  # section "Changing the login shell to $bash4 (bash4)"
#   if [[ -z $(grep -e "$bash4" /etc/shells) ]]; then
#     sudo bash -c "echo \"$bash4\" >> /etc/shells" || die "Adding $bash4 to /etc/shells failed."
#   fi
#   if type chsh >/dev/null 2>&1; then
#     chsh -s "$bash4" || die "Changing users default shell failed."
#     echo "Please close this window now and start this script again."
#     echo "Now."
#     exit 0
#   else
#     echo "Please manually change your default shell to ${bash4}!"
#   fi
else
  # echo "Skipped login shell change."
  echo "Skipped Oh my zsh installation."
fi

# install homebrew
if ! hash brew &>/dev/null; then
  echo "Installing Homebrew ..."
  /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)" || die "Installing brew failed."
  echo "Tapping caskrooms ..."
  brew tap caskroom/cask || die "brew tap caskroom/cask failed."
  brew tap caskroom/fonts || die "brew tap caskroom/fonts failed"
else
  echo "Skipped brew installation."
fi

if ! hash pass &>/dev/null; then
  section "pass installation"
  brew install pass || die "brew install pass failed."
else
  echo "Skipped pass installation."
fi

# copy .gitconfig and .profile_private from pass
if [[ ! -e ~/.profile_private || ! -e ~/.gitconfig ]]; then
  section "Copying .gitconfig and .profile_private from pass"
  pass .gitconfig > ~/.gitconfig
  pass .profile_private > ~/.profile_private
else
  echo "Skipped copying .gitconfig and .profile_private from pass"
fi

#TODO
# install other wifis (requires "pass")
# pass SSID | sed -n '2,$p' | awk '{$1=""; print $0}'
# - install "RZUWsec"
# provide optional network change (and connection test afterwards)

# install dropbox
if [[ ! -e /Applications/Dropbox.app/ ]]; then
  #brew install dropbox
  section "Dropbox installation"
  brew cask install dropbox || die "brew cask install dropbox failed!"
  #log in dropbox
  letRead "Please log in to Dropbox."
  open -g /Applications/Dropbox.app/
  pc dropbox
  pressEnterTo
else
  echo "Skipped Dropbox installation."
fi

# TODO
# install xcode
# - install from app store
# - sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer
# - sudo xcodebuild -license^

if ! hash mas &>/dev/null; then
  section "mas installation"
  brew install mas || die "brew install mas failed."
  while [[ -z $(mas account) ]]; do
    letRead "Please sign in to App Store."
    open /Applications/App\ Store.app/
    pressEnterTo
  done
  echo "mas account: $(mas account)"
else
  echo "Skipped mas installation."
fi

# install chordpro
if ! hash chordpro &>/dev/null; then
  section "Chordpro installation"
  #sudo cpan chordpro
  sudo cpan install JV/App-Music-ChordPro-0.94.tar.gz
else
  echo "Skipped chordpro installation."
fi

echo
########################################################################################################
##### Full automatic part (place as much as possible here)
########################################################################################################
# In this part, there is *no* need for user intervention at all
# no use of pressEnterTo function, die only in severe error cases
supersection "Full automatic part"
echo

#move remaining files from backup
pushd "$HOME" &> /dev/null || die "cd to $HOME/ failed!"
if [[ ! -d IdeaProjects ]]; then
  c IdeaProjects Downloads/ Documents/ Pictures/ Music/
else
  echo "Skipped copying of IdeaProjects to $HOME/."
fi

cd "Library" || die "cd to $HOME/Library/ failed!"
if [[ ! -d Thunderbird ]]; then
  c Thunderbird
else
  echo "Skipped copying of Thunderbird to $HOME/Library/"
fi

### place at ~/Library/Preferences
if [[ ! -n $(ls Preferences/IntelliJIdea* 2> /dev/null) ]]; then
  c Preferences/
else
  echo "Skipped copying of Preferences to $HOME/Library/Preferences/."
fi

### place at /Applications
cd "/Applications" || die "cd to /Applications failed!"
if [[ ! -d Minecraft ]]; then
  c Minecraft
else
  echo "Skipped copying Minecraft to /Applications/."
fi

popd &> /dev/null || die "cd failed"
echo

#app store
echo "### App Store apps installation"
failedapps=""
masls=$(mas list | awk '{print $1}')
for app in ${masinstalls[@]}; do
  if [[ -z $(echo "$masls" | grep $app) ]]; then
    echo "Installing $cask ..."
    mas install $app
    if [[ $? -ne 0 ]]; then
      echo "Failed installing $app $(mas info $app | sed -n 1p)"
      failedapps+="$app "
    fi
  else
    echo "Skipped already installed app: $app"
  fi
done
if [[ -n "$failedapps" ]]; then
  echo "Retry following app installs:"
  for app in $failedapps; do
    echo "mas install $app"
  done
else
  echo "All apps installed with no obvious problems."
fi
echo

echo "### brew cask installs"
#brew cask install
failedcasks=
echo "Looking up installed brew casks ..."
brewcaskls=$(brew cask ls)
for cask in ${brewcasks[@]}; do
  if [[ -z $(echo "$brewcaskls" | grep $cask) ]]; then
    echo "Installing cask $cask ..."
    brew cask install $cask
    if [[ $? -ne 0 ]]; then
      echo "Failed installing $cask"
      failedcasks+="$cask "
    fi
  else
    echo "Skipped already installed cask: $cask"
  fi
done
if [[ -n "$failedcasks" ]]; then
  echo "Retry following cask installs:"
  for cask in $failedcasks; do
    echo "brew cask install $cask"
  done
else
  echo "All casks installed with no obvious problems."
fi
echo

#brew install
echo "### brew installs"
failedformulas=
echo "Looking up installed brew formulas ..."
brewls=$(brew ls)
for formula in ${brews[@]}; do
  if [[ -z $(echo "$brewls" | grep $formula) ]]; then
    echo "Installing formula $formula ..."
    brew install $formula
    if [[ $? -ne 0 ]]; then
      echo "Failed installing $formula"
      failedformulas+="$formula "
    fi
  else
    echo "Skipped already installed formula: $formula"
  fi
done
if [[ -n "$failedformulas" ]]; then
  echo "Retry following formula installs:"
  for formula in $failedformulas; do
    echo "brew install $formula"
  done
else
  echo "All formulas installed with no obvious problems."
fi
echo

# ensure required dropbox content synced
while [[ ! ( -e "$trading_icon" && -e "$trading_script" ) ]]; do
  printf "Please wait until required dropbox data is syncing "
  sleep 1
  printf "."
  sleep 1
  printf "."
  sleep 1
  printf "."
  sleep 1
  printf "\r\e[K"
done
echo "All required dropbox data available."
echo

#create WhatsApp and Trading212 app with nativefier
if [[ ! -e "/Applications/WhatsApp Web.app" ]]; then
  section "Whatsapp Web.app installation"
  echo "Installing Whatsapp Web.app with nativefier from http://web.whatsapp.com/"
  nativefier -n "WhatsApp Web" "http://web.whatsapp.com/" || die "Creating Whatsapp Web.app failed."
  mv "WhatsApp Web-darwin-x64/WhatsApp Web.app" /Applications/
  rm -rf WhatsApp Web-darwin-x64/
else
  echo "Skipped creation of Whatsapp Web.app with nativefier."
fi

if [[ ! -e "/Applications/Trading212.app" ]]; then
  section "Trading212.app installation"
  echo "Installing Trading212.app with nativefier from https://www.trading212.com/"
  nativefier -i "$trading_icon" --inject "$trading_script" -n "Trading212" 'https://www.trading212.com/' || die "Creating Trading212.app failed."

  mv "Trading212-darwin-x64/Trading212.app" /Applications/ || die "Moving to /Applications/ failed."
  rm -rf Trading212-darwin-x64/

  # Remove context menu - not necessary anymore, since 7.6.4
  # mainpath="/Applications/Trading212.app/Contents/Resources/app/lib/main.js"
  # if [[ -e "$mainpath" ]]; then
  #   mainjs=$(cat "$mainpath")
  #   contextmenustart=$(echo "$mainjs" | grep -n "_electron.ipcMain.on('contextMenuOpened', function (event, targetHref) {" | awk '{ print $1 + 0; }') # 6893
  #   contextmenuend=$(echo "$mainjs" | grep -n 'mainWindow.contextMenuOpen = true;' | awk '{ print $1 + 1; }') # 6928
  #   if [[ -n $contextmenustart && -n $contextmenuend ]]; then
  #     echo "$mainjs" | sed "${contextmenustart},${contextmenuend}d" > "$mainpath"
  #     echo "Successfully removed context menu (sed '${contextmenustart},${contextmenuend}d')"
  #   else
  #     echo "Failed to fetch context menu location. Please remove context menu initialization manually."
  #     echo "mate -l '6893-6928' \"$mainpath\" # location with nativefier 7.6.1; leave surrounding 'function initContextMenu(mainWindow) {'"
  #   fi
  # else
  #   echo "Failed to remove context menu. File not found: $mainpath"
  # fi

  mainpath="/Applications/Trading212.app/Contents/Resources/app/lib/main.js"
  if [[ -e "$mainpath" ]]; then
    mainjs=$(cat "$mainpath")
    lineToInsert=$(echo "$mainjs" | grep -n "mainWindow.webContents.on('will-navigate', onWillNavigate);" | awk '{ print $1 + 0; }') #5335
    line='  mainWindow.webContents.on("did-finish-load", function () { setTimeout(function () { mainWindow.webContents.send("loadListener"); }, 10000); })'
    if [[ -n $lineToInsert ]]; then
      echo "$mainjs" | sed -n "1,${lineToInsert}p" > "${mainpath}"
      echo "$line" >> "${mainpath}"
      echo "$mainjs" | sed -n "${lineToInsert},\$p" >> "${mainpath}"
      echo "Successfully injected listener call!"
    else
      echo "Failed to fetch listener insertion location. Please insert manually: $line"
      echo "mate -l '5306' \"$mainpath\" # location with nativefier 7.6.4: mainWindow.webContents.on('will-navigate', onWillNavigate);"
    fi

    appdir=$(dirname "$mainpath")
    pushd "$appdir/.." &>/dev/null || die "cd to $appdir/.. failed"
    npm i --save ws || die "npm install ws failed"
    popd &>/dev/null || die "cd failed"
  else
    echo "Failed to insert listener script call function. File not found: $mainpath"
  fi

else
  echo "Skipped creation of Trading212.app with nativefier."
fi

echo
####################################################
### Manual part
####################################################
# In this part, the script is just instructing, at most helping out a bit
supersection "Manual part"
echo

# - load iTerm prefs and custom profile from $P/Prefs
if ! defaults read com.googlecode.iterm2  >/dev/null; then
  printf "%s" "$iterm_settings" | pbcopy
  letRead "Let's switch to iTerm!
Open Settings and set settings folder to: $iterm_settings (copied to clipboard)"
  open /Applications/iTerm.app/ || die "Please install iTerm and restart the script to continue."
  pressEnterTo
  processname=iTerm2
  processes=$(ps aux | grep -i -- "$processname" | grep -v -e "$0" | grep -v "grep -i -- $processname") #|| die "Failed to fetch processes from ps aux."
  if [[ -n "$processes" ]]; then
    letRead "Hey, you didn't close iTerm! I will do it for you.."
    for id in $(echo "$processes" | awk '{print $2}'); do
      kill $id &>/dev/null
    done
  fi
  letRead "Now you can close this window and start the script in iTerm if you want."
  pressEnterTo
else
  echo "Skipped iTerm switch."
fi

section "Logins"
echo "Please login to following applications:"

if [[ ! -e "$HOME/Library/Application Support/Spotify/prefs" ]]; then
  letRead "  - Spotify"
  open /Applications/Spotify.app/ || die "Please install Spotify and restart the script to continue."
  pressEnterTo
else
  echo "Skipped Spotify login."
fi

if [[ ! -e "$HOME/Library/Containers/com.microsoft.onenote.mac" ]]; then
  letRead "  - OneNote"
  open /Applications/Microsoft\ OneNote.app/ || die "Please install OneNote and restart the script to continue."
  pressEnterTo
else
  echo "Skipped OneNote login."
fi

if ! grep gmail.com $HOME/Library/Calendars/Calendar\ Cache > /dev/null; then
  letRead "  - Google Calendar"
  open /System/Library/PreferencePanes/InternetAccounts.prefPane || die "WTF. Apple has changed the preferences pane."
  pressEnterTo
else
  echo "Skipped Google Calendar login."
fi

if [[ ! -e "$HOME/Library/Containers/com.atlassian.trello" ]]; then
  letRead "  - Trello (use the opportunity to set global shortcut to cmd+alt+t !)"
  open /Applications/Trello.app/ || die "Please install Trello and restart the script to continue."
  pressEnterTo
else
  echo "Skipped Trello login."
fi

echo
section "Settings"

current_dockitems=$(defaults read com.apple.dock | grep "\"file-label\" =" | sed 's/                "file-label" = //g;s/;//g')
if [[ "$dockitems" != "$current_dockitems" ]]; then
  letRead "Arrange the Dock with the following items in the given order:"
  open /Applications/
  letRead "$dockitems"
  pressEnterTo
else
  echo "Skipped Dock arrangement."
fi

if [[ ! -e "$HOME/Library/Application Support/TextMate/Managed/Bundles" ]]; then
  letRead "Go to Textmate Preferences and install bundles as you like."
  open /Applications/TextMate.app/ || die "Please install TextMate and restart the script to continue."
  pressEnterTo
else
  echo "Skipped Textmate bundles."
fi

if ls "$studium"/*.potx >/dev/null && [[ -e /Applications/Microsoft\ PowerPoint.app/ ]]; then
  # maybe also available via: defaults read | grep /Templates.localized | grep Normal
  if pot_target=$(echo ~/Library/Group\ Containers/*.Office/User\ Content.localized/Templates.localized) 2>/dev/null; then
    if ! ls "$pot_target"/*.potx >/dev/null; then
      echo "Copying Power Point templates to $pot_target"
      cp "$studium"/*.potx "$pot_target" || die "Copying Power Point templates failed"
    else
      echo "Skipped Power Point template copying. Already exist."
    fi
  else
    letRead "Please find the correct Power Point templates folder. Maybe you have to start and log in first.
Was at: ~/Library/Group\ Containers/*.Office/User\ Content.localized/Templates.localized"
    pressEnterTo
  fi
else
  echo "Skipped Power Point template copying. Power Point not installed or no template found at ${studium}."
fi

if ! defaults read net.elasticthreads.nv >/dev/null; then
  printf "%s" "$nv_directory" | pbcopy
  letRead "Go to nvALT Preferences and set note directory to $nv_directory (copied to clipboard)
Also log in to simplenote (yeah, pass in a new window..) and set a global shortcut here: cmd+alt+n"
  open /Applications/nvALT.app/ || die "Please install nvALT and restart the script to continue."
  pressEnterTo
fi

if ! firefox_profile=$(echo ~/Library/Application\ Support/Firefox/Profiles/*.default/bookmarkbackups) 2>/dev/null; then
  open /Applications/Firefox.app || die "Please install Firefox and restart the script to continue."
  letRead "Did not found the firefox bookmark folder. Starting Firefox now."
  pressEnterTo
fi
howtorestorebackup="https://support.mozilla.org/en-US/kb/restore-bookmarks-from-backup-or-move-them\#w_restoring-from-backups"
if ! firefox_profile=$(echo ~/Library/Application\ Support/Firefox/Profiles/*.default/bookmarkbackups) 2>/dev/null; then
  letRead "Did not found bookmarks folder again. Import bookmarks manually from: $firefox_bookmark_backup"
  open -a /Applications/Firefox.app "$howtorestorebackup"
  pressEnterTo
else
  if [[ -z $(ls -A "$firefox_profile") ]]; then
    if [[ -f "$firefox_bookmark_backup" ]]; then
      letRead "Copying bookmarks backup into Firefox Bookmark folder: $firefox_profile"
      cp "$firefox_bookmark_backup" "$firefox_profile/"
      open -a /Applications/Firefox.app "$howtorestorebackup"
      pressEnterTo
    else
      echo "WARNING: Firefox has no bookmarks yet, but no bookmark backup found: $firefox_bookmark_backup"
    fi
  else
    echo "Skipped copying firefox bookmarks, because booksmark backups are already present at: \"$firefox_profile\""
  fi
fi

if [[ ! -e ~/Library/Containers/com.rockysandstudio.Newsflow ]]; then
  letRead "Import in Newsflow the OPML: $newsflow_opml_backup"
  open /Applications/Newsflow.app/ || die "Please install Newsflow and restart the script to continue."
  pressEnterTo
else
  echo "Skipped Newsflow OPML import."
fi

echo "Last, but not least, check if:
### Dependencies
  - ffmpeg is required by audacity or mplayer
  - python@2 is required by something
  - you need osxfuse for the external drive
### Settings
  - intellij is logged in
  - global shortcut (and other settings) for iTerm is applied
  - go2shell is set up right (cd %PATH%; printf \"\e[F\e[K\")
  - check all system prefs: open /Applications/System\ Preferences.app/
  - are os shortcuts set?
  - dictionaries are installed correctly
    - Wikipedia.wikipediadictionary
    - Deutsch-Englisch.dictionary
    - OpenThesaurus Deutsch.dictionary
    - Apple Dictionary.dictionary
    - Oxford American Writer's Thesaurus.dictionary
    - New Oxford American Dictionary.dictionary
    - Oxford Thesaurus of English.dictionary
    - Duden Dictionary Data Set I.dictionary
    - German - English.dictionary
    - French - English.dictionary
    - Italian - English.dictionary
    - Spanish - English.dictionary
    - Russian - English.dictionary

And in the end, you might think of installing
  - adobe pro (contains key)
  - microsoft programs (see pdf in Documents)
  - wine (jardinains, siedler5, finale)

Thanks for your attention!"

supersection "The End"
popd &> /dev/null
