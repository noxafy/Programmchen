#!/bin/bash

lyrics=
title=
artist=
filename=
forceOverwriting=
useLyrics=
destination=$CHO
debug=
usage="Usage: \e[1m$(basename $0)\e[0m -h | [-d] [-f] [\e[4mtitle\e[0m] [\e[4martist\e[0m]"
help="Script for initiating an chordii file in interplay with \"lyrics\".
$usage
	\e[1m-h\e[0m	Displays this message and exits.
	\e[1m-d\e[0m	Print debug messages.
	\e[1m-f\e[0m	Forces overwriting an already existing file.
	\e[4mtitle\e[0m	Song's title.
	\e[4martist\e[0m	Song's artist.
"

die() {
  echo "$*"
  exit 1
}

while [[ -n $1 ]]; do
  case $1 in
    -h|--help)
      printf "$help"
      exit 0
      ;;
    -d)
      debug=true
      ;;
    -f)
      forceOverwriting=true
      ;;
    -*)
      printf "Wrong argument: %s\n$usage -- See -h for more help.\n" "$1"
      exit 1
      ;;
    *)
      title=$1
      artist=$2
      break;
      ;;
  esac
  shift
done

extractFromLyrics() {
  res=$(echo "$lyrics" | sed -n 1p)
  [[ -n $debug ]] && echo "First line from lyrics: $res"
  if [[ -n "$res" ]]; then
    [[ -z "$artist" ]] && artist=$(echo "$res" | sed 's/  -  .*//g')
    [[ -n $debug ]] && echo "Set artist to: $artist"
    [[ -z "$title" ]] && title=$(echo "$res" | sed -e 's/.*  -  //g' -e 's/ - .*//g')
    [[ -n $debug ]] && echo "Set title to: $title"
    lyrics=$(echo "$lyrics" | sed -n '3,$p')
  else
    lyrics=$(echo "$lyrics" | sed -n '2,$p')
  fi
  #echo "lyrics length: ${#lyrics}"
}

toFilename() {
  echo "$*" | sed -e "s/'//g" \
  -e 's/"//g' \
  -e 's/ - .*//g' \
  -e 's/ \{1,\}/_/g' \
  -e 's/(.*)//g' \
  -e 's/\[.*\]//g' \
  -e 's/_$//' \
  -e 's/\///' \
  -e 's/\\//' \
  -e 's/\*//' \
  -e 's/\?//'
}

toAscii() {
  echo "$*" | sed -e "s/ü/ue/g" \
  -e "s/Ü/Ue/g" \
  -e "s/ä/ae/g" \
  -e "s/Ä/Ae/g" \
  -e "s/ö/oe/g" \
  -e "s/Ö/Oe/g" \
  -e "s/ß/ss/g"
}

cd "$destination" || die "cd failed"

# if title is there
if [[ -n "$title" ]]; then
  [[ -n $debug ]] && echo "Given title detected: $title"
  [[ -z "$artist" ]] && read -p "Who's the artist? : " artist
  if [[ -z "$artist" && -t 0 ]]; then
    echo "Reaching out for lyrics of \"$title\"..."
  else
    echo "Reaching out for lyrics of \"$title\" by \"$artist\"..."
  fi
  # use title/artist with lyrics
  lyrics=$(lyrics "$title" "$artist")
  extractFromLyrics
fi

# if no lyrics and piped, use as lyrics
if [[ -z "$lyrics" ]]; then
  if [[ ! -t 0 ]]; then
    lyrics=$(cat)

    # if no title, try to extract artist / title
    if [[ -z "$title" ]]; then
      [[ -z "$lyrics" ]] && die "Piped lyrics must not be empty if no title is given."
      extractFromLyrics
      # title is mandatory, but if piped, no interaction is possible
      [[ -z "$title" ]] && die "Couldn't extract title from piped. Did you pipe from lyrics?"
      #echo "lyrics length: ${#lyrics}"
    fi
    if [[ -z "$lyrics" ]]; then
      echo "Grabbing lyrics..."
      # grab from lyrics but skip first line with artist and title
      lyrics=$(lyrics -q "$title" "$artist" | sed -n '3,$p')
    fi
  # no lyrics, no title, not piped
  elif [[ -z "$title" ]]; then
    #use lyrics spotify
    echo "Grabbing lyrics ..."
    lyrics=$(lyrics -q)
    if [[ -n "$lyrics" ]]; then
      extractFromLyrics
    fi
    if [[ -z "$title" ]]; then
      echo "Couldn't grab lyrics automatically. Please give some infomation."
      # ask artist/title and use them with lyrics --ask
      read -p "Who's the artist? : " artist
      read -p "What's the title? : " title
      while [[ -z $title ]]; do printf "Title cannot be empty. "; read -p "What's the title? " title; done
      read -p "Do you want to search for lyrics? (y/n) [y]: " ans
      case $ans in
      n)
        ;;
      *)
        if [[ -z "$artist" && -t 0 ]]; then
          echo "Reaching out for lyrics of \"$title\"..."
        else
          echo "Reaching out for lyrics of \"$title\" by \"$artist\"..."
        fi
        # use title/artist with lyrics
        lyrics=$(lyrics "$title" "$artist" | sed -n '3,$p')
        ;;
      esac
    fi
  fi
fi

[[ -z "$artist" ]] && read -p "Please give the artist now: " artist
filename="$(toFilename $title)-$(toFilename $artist).cho"
[[ -n $debug ]] && echo "Filename: $filename"

if [[ -e "$filename" && ! -n $forceOverwriting ]]; then
  [[ ! -t 0 ]] && die "Leadsheet \"$filename\" already exists."

  read -n 1 -p "Overwrite existing \"$filename\"? (y/n) [y]: " ans
  case $ans in
  n)
    echo
    read -p "Please specify another filename: " filename
    [[ -z "$filename" ]] && die "The filename cannot be empty."
    if [[ "$filename" != *.cho ]]; then filename="$filename.cho"; fi
    [[ -e "$filename " ]] && die "This file (\"$filename\") also exists."
    ;;
  "")
    ;;
  *)
    echo
    ;;
  esac
fi

year=$(date +%Y)
name=$(git config --global user.name)

if [[ -z $name ]]; then
  read -p "Please give your name (not specified in global git config): " name
  if [[ -z "$name" ]]; then
    echo "Name must not be empty!"
    exit 1
  fi
fi

content="{title: $title}
{composer: $artist}
{copyright: © $year $name }
{meta: arr Arr.: $name}
#{tempo: 120bpm}
# transpose 0

$lyrics"

echo "$content" > "$filename"
echo "Wrote ${#content} bytes to $PWD/$filename"

mate -l 8 -- "$filename"

[[ ! -t 0 ]] && exit 0
[[ -z $(which chocomp) ]] && exit 0 #die "Chodrii compiler (chocomp) not found!"

read -p "Compile now? (y/n) [y]: " ans
firsttime=true
while true; do
  case $ans in
  n)
    $firsttime && printf "chocomp \"%s\"" "$filename" | pbcopy 2>&1 > /dev/null && echo "Copied to cilpboard."
    exit 0
    ;;
  *)
    chocomp "$filename"
  esac
  read -p "Compile again? (y/n) [y]: " ans
  firsttime=false
done
