#!/bin/bash

file="$HOME/Dropbox/Sonstiges/Sprachen/Vokabeln/Englisch.csv"
vocs="$HOME/Dropbox/Sonstiges/Sprachen/Vokabeln/vocs"
unknowns="$HOME/Dropbox/Sonstiges/Sprachen/Vokabeln/unknowns"
appendToFile=$vocs
training=0
othersDetected=0
justPrint=0
word=
translation=
additional=
openVocs=
reslnnrs=
usage="Usage: \e[1m$(basename $0)\e[0m -h | [-n|-t] [\e[4mfile\e[0m] | -o | -a [-o] \e[4mword\e[0m [-o] | -s [-o] \e[4mword\e[0m [-o]"
help="Reads vocabularies from an csv (does not write) and asks them randomly and two-way.
$usage
	\e[1m-h\e[0m	Displays this message and exits.
	\e[1m-n\e[0m	Opens a new window and tests you from there in training mode.
	\e[1m-t\e[0m	Starts training mode in this window (not recommended, use \e[1m-n\e[0m).
	\e[4mfile\e[0m	Reads the specified vokabulary csv. First and second arguments are meanings, 
		third can be used for comments. Be aware of the required formatting shown below.
		Default path is $file.
	\e[1m-o\e[0m	Opens the vocabulary list ($vocs).
        \e[1m-a\e[0m	Adds a new word to the vocabulary list. Uses formatting compliant to \e[1mvoc\e[0m.
	\e[1m-s\e[0m	Searches a word in both, vocabulary list and vocabulary database. Case-insensitive.

Create the .csv in the following form:
 \"word\",\"meaning\",\"helping comment for memorizing or pronouncing\"
"
#TODO when found multiple search results and opening intended, ask which one to open
#TODO perform search when "-o" with an argument
#TODO provide sorting (sort ignoring "to"'s)
#TODO forbid "," in word, translation or additional

searchFor() {
  res=$(cat -n "$1" | grep -i -- "$2")
  if [[ -n $res ]]; then
    declare -i reslen=$(echo "$res" | wc -l)
    reslnnrs=$(echo "$res" | awk '{print $1}')
    othersDetected=1
    echo "Word in $(basename $1) detected: $reslen"
    if [[ $reslen -gt 5 ]]; then
      echo "$res" | sed -n 1,5p
      printf "Do you want to see all $reslen results? (y/n) [n]: "
      read -n 1 ans
      case $ans in
        y|Y)
          printf "\e[A\r\e[K"
          echo "$res" | sed -n '6,$p'
          ;;
        "")
          ;;
        *)
          echo
          ;;
      esac
    else
      echo "$res"
    fi
    if [[ -n $openVocs ]]; then
      openLine "$1" $reslnnrs
    fi
  fi
}

openLine() {
  #TODO: let user choose which one to open
  echo "Opening $1 at line $2"
  mate -l $2-$(($2+1)) "$1" 2> /dev/null || open "$1"
}

searchForInAll() {
  # TOOD better use fzf
  searchFor "$file" "$1"
  searchFor "$vocs" "$1"
  searchFor "$unknowns" "$1"
  if [[ $justPrint -eq 0 && $othersDetected -ne 0 ]]; then
    printf "Do you want to continue adding anyway? (y/n) [n]: "
    read -n 1 ans
    case $ans in
      y|Y)
        echo
        ;;
      *)
        echo "Nothing added."
        exit 0
        ;;
    esac
  fi
}

addInteractive() {
  cnt=0
  while [[ ( $cnt -eq 0 || $(basename $appendToFile) != unknowns ) && ( -z "$word" || "$word" == - ) ]]; do
    if [[ $cnt -gt 0 ]]; then
      [[ $cnt -eq 3 ]] && echo "You're an idiot. Nothing added." && exit 1
      printf "Word cannot be empty! "
    fi
    printf "Please give a word: "
    read word
    ((cnt++))
  done

  cnt=0
  while [[ ( $cnt -eq 0 || $(basename $appendToFile) != unknowns ) && ( -z "$translation" || "$translation" == - ) ]]; do
    if [[ $cnt -gt 0 ]]; then
      [[ $cnt -eq 3 ]] && echo "You're an idiot. Nothing added." && exit 1
      printf "Translation cannot be empty! "
    fi
    printf "Please give a translation: "
    read translation
    ((cnt++))
  done

  if [[ $additional == - ]]; then
    additional=""
  elif [[ -z $additional ]]; then
    printf "Some additional information? (for memorizing or pronouncing): "
    read additional
  fi
}

addEntry() {
  addInteractive
  if [[ -n $additional && ${additional:0:1} == "[" && ${additional:${#additional}-1} != "]" ]]; then
    additional=${additional}]
  fi
  entry="\"$word\",\"$translation\",\"$additional\",\"$(date '+%s')000\""
  if [[ $(tail -c 1 "$vocs") == "" ]]; then
    echo "$entry" >> "$appendToFile" && echo "Successfully added to $(basename $appendToFile) $entry"
  else
    printf "\n%s\n" "$entry" >> "$appendToFile" && echo "Successfully added to $(basename $appendToFile) $entry"
  fi

  if [[ -n $openVocs ]]; then
    if [[ -n $word ]]; then
      vocslength=$(wc -l "$appendToFile" | awk '{print $1}')
      openLine "$appendToFile" $vocslength
    else
      mate "$appendToFile" 2> /dev/null || open "$appendToFile"
    fi
  fi
}

case $1 in
  -h)
    printf "$help"
    exit 0
    ;;
  -n)
    osascript -e 'tell application "Terminal" to do script "voc -t; exit"' >& /dev/null
    exit 0
    ;;
  -t)
    training=1
    if [[ $2 ]]; then
      file="$2"
    fi
    ;;
  -a)
    if [[ $2 == -u ]]; then
      appendToFile="$unknowns"
      shift
    fi
    if [[ $2 == -o ]]; then
      openVocs=true
      shift
    fi
    if [[ $2 == "to" && -n $3 && $3 != -o ]]; then
      searchForInAll "$3"
      word="$2 $3"
      translation="$4"
      additional="$5"
      if [[ $6 == -o ]]; then
        openVocs=true
      elif [[ $5 == -o ]]; then
        openVocs=true
        additional=
      elif [[ $4 == -o ]]; then
        openVocs=true
        translation=
        additional=
      fi
    elif [[ -n $2 ]]; then
      searchForInAll "$2"
      word="$2"
      translation="$3"
      additional="$4"
      if [[ $5 == -o ]]; then
        openVocs=true
      elif [[ $4 == -o ]]; then
        openVocs=true
        translation=
      elif [[ $3 == -o ]]; then
        openVocs=true
        translation=
        additional=
      fi
    fi
    addEntry
    exit 0
    ;;
  -o)
    if [[ $2 == -u ]]; then
      appendToFile="$unknowns"
      shift
    fi
    mate $appendToFile || open $appendToFile
    exit 0
    ;;
  -s)
    if [[ $2 == -o ]]; then
      openVocs=true
      shift
    fi
    if [[ $2 == to && -n $3 ]]; then
      shift
    fi
    if [[ $3 == -o ]]; then
      openVocs=true
    fi
    justPrint=1
    searchForInAll "$2"
    if [[ $othersDetected -eq 0 ]]; then
      echo "No matching entry found."
    fi
    exit 0
    ;;
  -*)
    printf "Wrong argument: %s\n$usage -- See -h for more help.\n" "$1"
    exit 1
    ;;
  "")
    ;;
  *)
    file="$1"
    ;;
esac
shift

if [[ -e "$file" ]]; then
  if [[ -d "$file" ]]; then
    echo "$file is a directory. Please give a file. See -h for more help."
    exit 1
  elif [[ ! -r "$file" ]]; then
    echo "$file is not readable. See -h for more help."
    exit 1
  fi
else
  echo "File $file does not exist. See -h for more help."
  exit 1
fi

vocCache=$(cat "$file" | sed s/,\"\"//g | sed s/\ /=/g | sed s/\",\"/\"\ \"/g)
voclength=$(echo "$vocCache" | wc -l)
if [[ $voclength -gt 32767 ]]; then
  echo "Too many vocabularies to process. Please split it into multiple files."
fi

askfor() {
  fst=${1:1:$(( ${#1} - 2))}
  fst=${fst//=/ }
  snd=${2:1:$(( ${#2} - 2))}
  snd=${snd//=/ }
  printf "$fst ? "
  read trash
  printf "$snd"
  if [[ $3 && ! $3 =~ ^\"[0-9]+\"$ ]]; then
    trd=${3:1:$(( ${#3} - 2))}
    trd=${trd//=/ }
    printf "\n\t\e[2m$trd\e[0m"
  fi
  if [[ $training -eq 0 ]]; then
    echo ""
  fi
}

testVok() {
  if [[ $RANDOM -gt 16384 ]]; then
    askfor "$1" "$2" "$3"
  else
    askfor "$2" "$1" "$3"
  fi
}

if [[ $training -gt 0 ]]; then
  printf "\e[8;4;60t"
fi

while true; do
  if [[ $training -gt 0 ]]; then
    printf "\e[2J\e[H"
  fi
  randnum="$(($RANDOM % $voclength))p"
  vok=$(echo "$vocCache" | sed -n $randnum)
  testVok $vok
  read trash
done
