#!/bin/bash

target=
usage="\e[1m$(basename $0)\e[0m -h | -t \e[4mdir\e[0m"
help="An preparation script for the install script for computer reset.
$usage
	\e[1m-h\e[0m	Displays this message and exists.
	\e[1m-t\e[0m	Give a target folder where the data should be stored.
	\e[1m-c\e[0m	Calculate needed space for backup.
"

die() {
  echo "ERROR: $*" >&2
  exit 1
}

####################################################
### Args parsing
####################################################

case $1 in
  -h)
    printf "$help"
    exit 0
    ;;
  -c)
    sizeFormat() {
      if [[ $1 -ge 100000000000 ]]; then
        printf "%.0f GB" $(echo "scale=1; $1/1000000000" | bc)
      elif [[ $1 -ge 10000000000 ]]; then
        printf "%.1f GB" $(echo "scale=2; $1/1000000000" | bc)
      elif [[ $1 -ge 1000000000 ]]; then
        printf "%.2f GB" $(echo "scale=3; $1/1000000000" | bc)
      elif [[ $1 -ge 100000000 ]]; then
        printf "%.0f MB" $(echo "scale=1; $1/1000000" | bc)
      elif [[ $1 -ge 10000000 ]]; then
        printf "%.1f MB" $(echo "scale=2; $1/1000000" | bc)
      elif [[ $1 -ge 1000000 ]]; then
        printf "%.2f MB" $(echo "scale=3; $1/1000000" | bc)
      elif [[ $1 -ge 100000 ]]; then
        printf "%.0f kB" $(echo "scale=1; $1/1000" | bc)
      elif [[ $1 -ge 10000 ]]; then
        printf "%.1f kB" $(echo "scale=2; $1/1000" | bc)
      elif [[ $1 -ge 1000 ]]; then
        printf "%.2f kB" $(echo "scale=3; $1/1000" | bc)
      else
        printf "$1 Bytes"
      fi
    }

    pushd "$HOME" &> /dev/null
    idea=$(du -s IdeaProjects/ | awk '{print $1}')
    docs=$(du -s Documents/ | awk '{print $1}')
    pics=$(du -s Pictures/ | awk '{print $1}')
    mus=$(du -s Music/ | awk '{print $1}')
    drop=$(du -s Dropbox/ | awk '{print $1}')
    thund=$(du -s Library/Thunderbird/Profiles | awk '{print $1}')
    dicts=$(du -s Library/Dictionaries | awk '{print $1}')
    intelli=$(du -s Library/Application\ Support/IntelliJIdea* | awk '{print $1}' | xargs -n 1 printf "%d + ")
    intelli=$(echo "$intelli 0" | bc)
    all=$(echo "($idea + $docs + $pics + $mus + $drop + $thund + $dicts + $intelli) * 512" | bc)
    echo "You will need about $(sizeFormat $all)."
    popd &> /dev/null
    exit 0
    ;;
  -t)
    if [[ -z $2 ]]; then
      printf "Please give a target folder with argument -t. See -h for more help.\n"
      exit 1
    elif [[ ! -e $2 ]]; then
      mkdir -p "$2" || die "Failed to create dir $target. See -h for more help.\n"
    elif [[ ! -w $2 ]]; then
      printf "Please give a writeable target folder with argument -t. See -h for more help.\n"
      exit 1
    elif [[ ! -d $2 ]]; then
      printf "Please give a target folder, not a file, with argument -t. See -h for more help.\n"
      exit 1
    fi
    target=$(cd $(dirname "$2"); pwd)/$(basename "$2") || die "Bad target path: $2"
    ;;
  -*)
    printf "Wrong argument: %s\n$usage -- See -h for more help.\n" "$1"
    exit 1
    ;;
esac

if [[ -z $target ]]; then
  printf "Please give a target folder. See -h for more help.\n"
  exit 1
fi

####################################################
### Preparation
####################################################

#copy to target
ctt() {
  while [[ -n $1 ]]; do
    printf "Copying $PWD/$1 "
    printf "($(du -sh "$1" | awk '{print $1}')) ...\n"
    if [[ -d "$1" ]]; then
      rsync --size-only --delete -a "$1/" "$target/$1" || die "Copying folder $1 to $target failed"
    else
      rsync --size-only --delete -a "$1" "$target/$1" || die "Copying file $1 to $target failed"
    fi
    shift
  done
}

# Copy from ~
pushd "$HOME" &> /dev/null || die "cd to $HOME failed"
if [[ ! -e "$target/.m2" ]]; then
  mkdir "$target/.m2" || die "mkdir .m2 failed"
fi

rm -rf .gnupg/S.gpg-agent* #remove rsync-blocking sockets from gpg-agent (timeout for retyping key password)
ctt .bash_profile .profile .zshrc .m2/settings.xml .tm_properties .ssh .password-store .gnupg
ctt IdeaProjects Documents Pictures Music Dropbox

cd "Library" || die "cd to $HOME/Library failed"
if [[ ! -e "$target/Thunderbird" ]]; then
  mkdir "$target/Thunderbird" || die "mkdir Thunderbird failed"
fi
ctt Thunderbird/Profiles # - Thunderbird folder
ctt "Keyboard Layouts" # - keyboard layout
ctt "Dictionaries" # Databases for Dictionary.app

cd "Application Support" || die "cd to $HOME/Library/Application\ Support failed"
ctt IntelliJIdea* # IntelliJ config folder

# - minecraft launcher
cd /Applications || die "cd to /Applications failed"
ctt Minecraft

popd &> /dev/null

####################################################
### Manual
####################################################

#export:
# mkdir manual
#
# echo "Export and save to $target/manual:"
# echo " - Terminal layouts" # - Terminal layout Homebrew
# echo " - Newsflow OPML" # - Newsflow OPML
# echo " - Keychains (mircosoft, wlans)" # - keychain (microsoft, wlans)
# echo " - Firefox bookmarks" # - firefox bookmarks

#ensure:
#mkdir dashboard
#echo "Copy to $target/dashboard" # - Dashboard apps
#echo " - eCalc_Scientific.wdgt"
#echo " - iStat Pro.wdgt"
#echo "Copy to $target/"
#echo " - [Adobe Pro Installer]" # - adobe installer
# echo "Paste password in sys_install:20, when placed in position"

