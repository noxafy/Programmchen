#!/bin/bash

target=
default_target="$(git config --global custom.backup)"
warningFlag=
rsync --version | grep "version [210]\." && rsync_progress="" || rsync_progress="--info=progress2"
usage="\e[1m$(basename $0)\e[0m -h | -t \e[4mdir\e[0m"
help="An preparation script for the install script for computer reset.
$usage
	\e[1m-h\e[0m	Displays this message and exists.
	\e[1m-t\e[0m	Give a target folder where the data should be stored.
	\e[1m-c\e[0m	Calculate needed space for backup.
"

die() {
  echo "ERROR: $*" >&2
  exit 1
}

warn() {
  echo "WARNING: $*" >&2
  warningFlag=true
}

####################################################
### Args parsing
####################################################

case $1 in
  -h)
    printf "$help"
    exit 0
    ;;
  -c)
    sizeFormat() {
      if [[ $1 -ge 100000000000 ]]; then
        printf "%.0f GB" $(echo "scale=1; $1/1000000000" | bc)
      elif [[ $1 -ge 10000000000 ]]; then
        printf "%.1f GB" $(echo "scale=2; $1/1000000000" | bc)
      elif [[ $1 -ge 1000000000 ]]; then
        printf "%.2f GB" $(echo "scale=3; $1/1000000000" | bc)
      elif [[ $1 -ge 100000000 ]]; then
        printf "%.0f MB" $(echo "scale=1; $1/1000000" | bc)
      elif [[ $1 -ge 10000000 ]]; then
        printf "%.1f MB" $(echo "scale=2; $1/1000000" | bc)
      elif [[ $1 -ge 1000000 ]]; then
        printf "%.2f MB" $(echo "scale=3; $1/1000000" | bc)
      elif [[ $1 -ge 100000 ]]; then
        printf "%.0f kB" $(echo "scale=1; $1/1000" | bc)
      elif [[ $1 -ge 10000 ]]; then
        printf "%.1f kB" $(echo "scale=2; $1/1000" | bc)
      elif [[ $1 -ge 1000 ]]; then
        printf "%.2f kB" $(echo "scale=3; $1/1000" | bc)
      else
        printf "$1 Bytes"
      fi
    }

    pushd "$HOME" &> /dev/null
    idea=$(du -s IdeaProjects/ | awk '{print $1}')
    docs=$(du -s Documents/ | awk '{print $1}')
    pics=$(du -s Pictures/ | awk '{print $1}')
    mus=$(du -s Music/ | awk '{print $1}')
    drop=$(du -s Dropbox/ | awk '{print $1}')
    desk=$(du -s Desktop/ | awk '{print $1}')
    thund=$(du -s Library/Thunderbird/Profiles | awk '{print $1}')
    dicts=$(du -s Library/Dictionaries | awk '{print $1}')
    intelli=$(du -s Library/Preferences/IntelliJIdea* | awk '{print $1}' | xargs -n 1 printf "%d + ")
    intelli=$(echo "$intelli 0" | bc)
    all=$(echo "($idea + $docs + $pics + $mus + $drop + $desk + $thund + $dicts + $intelli) * 512" | bc)
    echo "You will need about $(sizeFormat $all)."
    popd &> /dev/null
    exit 0
    ;;
  -t)
    if [[ -z $2 ]]; then
      printf "Please give a target folder with argument -t. See -h for more help.\n"
      exit 1
    elif [[ ! -e $2 ]]; then
      mkdir -p "$2" || die "Failed to create dir $target. See -h for more help.\n"
    elif [[ ! -w $2 ]]; then
      printf "Please give a writeable target folder with argument -t. See -h for more help.\n"
      exit 1
    elif [[ ! -d $2 ]]; then
      printf "Please give a target folder, not a file, with argument -t. See -h for more help.\n"
      exit 1
    fi
    target=$(cd $(dirname "$2"); pwd)/$(basename "$2") || die "Bad target path: $2"
    ;;
  -*)
    printf "Wrong argument: %s\n$usage -- See -h for more help.\n" "$1"
    exit 1
    ;;
esac

function saveToPass() {
  filename=$(basename "$1")
  echo "Save $filename to pass"
  cat "$1" | pass insert -m "$filename" > /dev/null || die "Copying $filename into pass failed"
}

# for convenience reasons, place here
# update .gitconfig and .private_profile into pass
saveToPass ~/.gitconfig
saveToPass ~/.private_profile

if [[ -d "$default_target" ]]; then
  target="$default_target"
fi

if [[ -z "$target" ]]; then
  printf "Please give a target folder to backup to. See -h for more help.\n"
  exit 1
fi

####################################################
### Preparation: Make backup of backup
####################################################

if [[ -d "$target" ]]; then
  size=$(du -sh "$target" | awk '{print $1}')

  cnt=1
  backup_dir="$HOME/backup$cnt"
  while [[ -d "$backup_dir" ]]; do
    ((cnt++))
    [[ $cnt == 1 ]] && die "Could not create a backup folder name"
    backup_dir="$HOME/backup$cnt"
  done
  echo "Backing up current backup ($size) to $backup_dir ..."
  mkdir "$backup_dir" || die "Creating backup dir for backing up the current backup failed!"
  rsync -a $rsync_progress "$target/" "$backup_dir" || die "Backing up current backup failed!"
fi

####################################################
### Backup
####################################################

#copy to target
ctt() {
  while [[ -n "$1" ]]; do
    source_name="$1"
    shift
    echo "Backing up $PWD/$source_name"
    size=$(du -sh "$source_name") || {
      warn "Failed to backup: $PWD/$source_name"
      continue;
    }
    size=$(echo "$size" | awk '{print $1}')
    printf "\033[A\rBacking up $PWD/$source_name (%s) ...\n" "${size:-??}"
    if [[ -d "$source_name" ]]; then
      rsync $rsync_option --size-only --delete -a "$source_name/" "$target/$source_name" || {
        warn "Backing up folder $source_name to $target failed"
        continue;
      }
    elif [[ -f "$source_name" ]]; then
      rsync $rsync_option --size-only --delete -a "$source_name" "$target/$source_name" || {
        warn "Backing up file $source_name to $target failed"
        continue;
      }
    else
      warn "Invalid backup task: $source_name"
      continue;
    fi
  done
}

function createTargetDir() {
  if [[ ! -d "$target/$1" ]]; then
    if [[ -e "$target/$1" ]]; then
      echo "Already exists, but is not a directory: $target/$1"
      echo "Removing ..."
      rm -rf "$target/$1" || die "rm $target/$1 failed"
    fi
    mkdir "$target/$1" || die "mkdir $target/$1 failed"
  fi
}

# Copy from ~
pushd "$HOME" &> /dev/null || die "cd to $HOME failed"

createTargetDir .m2

rm -rf .gnupg/S.gpg-agent* #remove rsync-blocking sockets from gpg-agent (timeout for retyping key password)
ctt .bashrc .profile .public_profile .zshrc .nanorc .m2/settings.xml .tm_properties .ssh .password-store .gnupg

# read -p "Do you want to continue backup with the time consuming folders? (y/n) [y]: " ans
# case $ans in
# n)
#   exit 0
#   ;;
# *)
#   ;;
# esac

ctt Dropbox IdeaProjects Downloads Documents Pictures Music Desktop

cd "Library" || die "cd to $HOME/Library failed"

createTargetDir Thunderbird
ctt Thunderbird/Profiles # - Thunderbird folder

ctt "Keyboard Layouts" # - keyboard layout
ctt "Dictionaries" # Databases for Dictionary.app

createTargetDir Preferences
ctt Preferences/IntelliJIdea* # IntelliJ config folder
ctt Preferences/com.googlecode.iterm2
ctt Preferences/com.zipzapmac.Go2Shell.plist

# firefox bookmark backup
if firefox_profile=$(echo ~/Library/Application\ Support/Firefox/Profiles/*.default/bookmarkbackups) 2>/dev/null; then
  cd "$firefox_profile" || die "cd to $firefox_profile failed"
  recent_backup=$(ls -t | head -1)
  mkdir files
  cp "$recent_backup" "files/firefox_bookmark.jsonlz4"
  ctt "files/firefox_bookmark.jsonlz4"
  rm -rf files || die "Removing tmp dir failed: $firefox_profile/files"
else
  warn "Could not backup firefox bookmark! Folder does not exist: $firefox_profile"
fi

# - minecraft launcher
cd /Applications || die "cd to /Applications failed"
ctt Minecraft

popd &> /dev/null

if [[ -z $warningFlag ]]; then
  echo "Deleting dated backup."
  rm -rf "$backup_dir" || die "Deleting dated backup failed!"
else
  echo "There was an error. Backed up backup is being preserved ($backup_dir)."
  echo "Fix that error and try again."
  exit 1
fi

####################################################
### Manual
####################################################

#export:
createTargetDir files

echo "Save to $target/files:"
echo " - Newsflow -> Settings -> Settings Wheel -> Export OPML (as \"Newsflow Subscriptions.xml\")" # - Newsflow OPML
open files

#ensure:
echo "Ensure existence in $target/files"
echo " - Firefox bookmarks (as \"firefox_bookmark.jsonlz4\")"

createTargetDir dashboard
echo "Ensure existence in $target/dashboard" # - Dashboard apps
echo " - eCalc_Scientific.wdgt"
echo " - iStat Pro.wdgt"

createTargetDir installers
echo "Ensure existence in $target/installers"
echo " - Adobe Pro Installer" # - adobe installer
echo " - .exe-files for Jardinains, Siedler5 and Finale" # wine
