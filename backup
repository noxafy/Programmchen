#!/bin/bash

target=
default_target="$(git config --global custom.backup)"
warningFlag=
rsync --version | grep "version [210]\." && rsync_progress="" || rsync_progress="--info=progress2"
usage="\e[1m$(basename $0)\e[0m -h | -t \e[4mdir\e[0m"
help="An preparation script for the install script for computer reset.
$usage
	\e[1m-h\e[0m	Displays this message and exists.
	\e[1m-t\e[0m	Give a target folder where the data should be stored.
	\e[1m-c\e[0m	Calculate needed space for backup.
"

####################################################
### Functions
####################################################

die() {
  echo "ERROR: $*" >&2
  exit 1
}

warn() {
  echo "WARNING: $*" >&2
  warningFlag=true
}

sizeFormat() {
  if [[ $1 -ge 100000000000 ]]; then
    printf "%.0f GB" $(echo "scale=1; $1/1000000000" | bc)
  elif [[ $1 -ge 10000000000 ]]; then
    printf "%.1f GB" $(echo "scale=2; $1/1000000000" | bc)
  elif [[ $1 -ge 1000000000 ]]; then
    printf "%.2f GB" $(echo "scale=3; $1/1000000000" | bc)
  elif [[ $1 -ge 100000000 ]]; then
    printf "%.0f MB" $(echo "scale=1; $1/1000000" | bc)
  elif [[ $1 -ge 10000000 ]]; then
    printf "%.1f MB" $(echo "scale=2; $1/1000000" | bc)
  elif [[ $1 -ge 1000000 ]]; then
    printf "%.2f MB" $(echo "scale=3; $1/1000000" | bc)
  elif [[ $1 -ge 100000 ]]; then
    printf "%.0f kB" $(echo "scale=1; $1/1000" | bc)
  elif [[ $1 -ge 10000 ]]; then
    printf "%.1f kB" $(echo "scale=2; $1/1000" | bc)
  elif [[ $1 -ge 1000 ]]; then
    printf "%.2f kB" $(echo "scale=3; $1/1000" | bc)
  else
    printf "$1 Bytes"
  fi
}

calc_size() {
  overall_size=0
  return_code=0
  for f in "$@"; do
    size=$(du -s "$f") || {
      warn "Failed to fetch size: $1"
      return_code=1
      continue
    }
    size=$(echo "$size" | awk '{print $1}') || {
      warn "Failed to calculate size: $1"
      return_code=1
      continue
    }
    if [[ -f "$f" && $size -lt 2049 ]]; then # calc small files (<1MB) more exactly
      size=$(wc -c < "$f")
    else
      ((size*=512))
    fi
    #printf "Size needed for $f: %s\n" >&2 "$(sizeFormat $size)"
    ((overall_size+=size))
  done
  sizeFormat $overall_size
  return $return_code
}

function rsyncit() {
  rsync $rsync_progress --size-only --recursive --filter=':- .gitignore' \
          --links --perms --times --crtimes --group --owner --devices --specials `# preserve everything` \
          --delete --delete-delay `# but delete non existing files` \
          "$1" "$2"; return $?
}

function ctt() { #copy to target
  while [[ -n "$1" ]]; do
    source_name="$1"
    shift

    # calc size
    echo "$PWD/$source_name (calculating size ..."
    size=$(calc_size "$PWD/$source_name") || continue;
    printf "\e[F\e[K$PWD/$source_name (%s) ...\n" "${size:-??}"

    # backup
    if [[ -d "$source_name" ]]; then
      source_name="$source_name/"
    elif [[ ! -f "$source_name" ]]; then
      warn "Invalid backup task: $source_name"
      continue;
    fi
    rsyncit "$source_name" "$target/$source_name" || {
      warn "Backing up $source_name to $target failed"
      continue;
    }
  done
}

function ensureTargetDir() {
  if [[ ! -d "$target/$1" ]]; then
    if [[ -e "$target/$1" ]]; then
      echo "Already exists, but is not a directory: $target/$1"
      echo "Removing ..."
      rm -rf "$target/$1" || die "rm $target/$1 failed"
    fi
    mkdir "$target/$1" || die "mkdir $target/$1 failed"
  fi
}

function saveToPass() {
  filename=$(basename "$1")
  echo "Save $filename to pass"
  cat "$1" | pass insert -m "$filename" > /dev/null || die "Copying $filename into pass failed"
}

####################################################
### Args parsing
####################################################

case $1 in
  -h)
    printf "$help"
    exit 0
    ;;
  -c)
    pushd "$HOME" &> /dev/null
    overall_size=$(calc_size IdeaProjects Documents Pictures Music Dropbox Desktop \
                             Library/Thunderbird/Profiles Library/Dictionaries Library/Preferences/IntelliJIdea*)
    echo "You will need about $overall_size."
    popd &> /dev/null
    exit 0
    ;;
  -t)
    if [[ -z $2 ]]; then
      printf "Please give a target folder with argument -t. See -h for more help.\n"
      exit 1
    elif [[ ! -e $2 ]]; then
      mkdir -p "$2" || die "Failed to create dir $target. See -h for more help.\n"
    elif [[ ! -w $2 ]]; then
      printf "Please give a writeable target folder with argument -t. See -h for more help.\n"
      exit 1
    elif [[ ! -d $2 ]]; then
      printf "Please give a target folder, not a file, with argument -t. See -h for more help.\n"
      exit 1
    fi
    target=$(cd $(dirname "$2"); pwd)/$(basename "$2") || die "Bad target path: $2"
    ;;
  -*)
    printf "Wrong argument: %s\n$usage -- See -h for more help.\n" "$1"
    exit 1
    ;;
esac

echo "####################################################"
echo "### Preparation"
echo "####################################################"

# for convenience reasons, place here
# update .gitconfig and .private_profile into pass
saveToPass ~/.gitconfig
saveToPass ~/.private_profile

if [[ -z "$target" ]]; then
  if [[ -d "$default_target" ]]; then
    target="$default_target"
  else
    printf "Please give a target folder (-t) to backup to. See -h for more help.\n"
    exit 1
  fi
fi
echo "Set target to: $target"
echo

backup_dir="$HOME/backup"
if [[ -n $(ls -A "$target") ]]; then
  echo "Backing up current backup (calculating size ..."
  size=$(calc_size "$target") || die "Size calculation for $target failed"

  printf "\e[F\e[KBacking up current backup ($size) to $backup_dir ...\n"
  rsyncit "$target/" "$backup_dir" || die "Backing up current backup failed"
  echo
fi

echo "####################################################"
echo "### Backup"
echo "####################################################"

# Copy from ~
pushd "$HOME" &> /dev/null || die "cd to $HOME failed"

ensureTargetDir .m2

rm -rf .gnupg/S.gpg-agent* #remove rsync-blocking sockets from gpg-agent (timeout for retyping key password)
ctt .bashrc .profile .public_profile .zshrc .nanorc .m2/settings.xml .tm_properties .ssh .password-store .gnupg

# read -p "Do you want to continue backup with the time consuming folders? [y]: " trash

ctt Dropbox IdeaProjects Downloads Documents Pictures Music Desktop

cd "Library" || die "cd to $HOME/Library failed"

ensureTargetDir Thunderbird
ctt Thunderbird/Profiles # - Thunderbird folder

ctt "Keyboard Layouts" # - keyboard layout
ctt "Dictionaries" # Databases for Dictionary.app

ensureTargetDir Preferences
ctt Preferences/IntelliJIdea* # IntelliJ config folder
ctt Preferences/com.googlecode.iterm2.plist
ctt Preferences/com.zipzapmac.Go2Shell.plist

# firefox bookmark backup
if firefox_profile=$(echo ~/Library/Application\ Support/Firefox/Profiles/*.default/bookmarkbackups) 2>/dev/null; then
  cd "$firefox_profile" || die "cd to $firefox_profile failed"
  recent_backup=$(ls -t | head -1)
  mkdir files
  cp "$recent_backup" "files/firefox_bookmark.jsonlz4"
  ensureTargetDir files
  ctt "files/firefox_bookmark.jsonlz4"
  rm -rf files || die "Removing tmp dir failed: $firefox_profile/files"
else
  warn "Could not backup firefox bookmark! Folder does not exist: $firefox_profile"
fi

# - minecraft launcher
cd /Applications || die "cd to /Applications failed"
ctt Minecraft

popd &> /dev/null

#if [[ -z $warningFlag ]]; then
#  echo "Deleting dated backup at $backup_dir"
#  rm -rf "$backup_dir" || die "Deleting dated backup failed"
#else
#  echo "There was an error. Backed up backup is being preserved ($backup_dir)."
#  echo "Fix that error and try again."
#  exit 1
#fi
echo "Backup finished!"
echo

echo "####################################################"
echo "### Manual part"
echo "####################################################"

#export:
echo "Save to $target/files"
echo " - Newsflow -> Settings -> Settings Wheel -> Export OPML (as \"Newsflow Subscriptions.xml\")"
echo

ensureTargetDir dashboard
echo "Ensure existence in $target/dashboard"
echo " - eCalc_Scientific.wdgt"
echo " - iStat Pro.wdgt"

ensureTargetDir installers
echo "Ensure existence in $target/installers"
echo " - Adobe Pro Installer"
echo " - wine: .exe-files for Jardinains, Siedler5 and Finale"
