#!/bin/bash

timeout=15
sendNote=
waitflag=
wifiDevice=en0
starttime=$(date "+%s")
output=2 # 3=debug; 2=outall; 1=outnosuccesswithoutwaiting; if empty, no output
usage="Usage: \e[1m$(basename $0)\e[0m -h | [-d|-s|-q] [-n] [-t \e[4mtimeout\e[0m]"
help="Test for internet connection establishment.
$usage
	\e[1m-h\e[0m	Displays this message and exits.
	\e[1m-d\e[0m	Debug output.
	\e[1m-s\e[0m	No output on success without waiting (best for scripts).
	\e[1m-q\e[0m	No console output, except errors.
	\e[1m-n\e[0m	Send also a note message on connection found.
	\e[1m-t\e[0m	Specify a timeout in seconds (default: $timeout).
"

while [[ -n $1 ]]; do
  case $1 in
  -h)
    printf "$help"
    exit 0
    ;;
  -q)
    output=0
    ;;
  -s)
    output=1
    ;;
  -d)
    output=3
    ;;
  -n)
    sendNote=1
    ;;
  -t)
    case $2 in
    [0-9][0-9][0-9][0-9][0-9]|[0-9][0-9][0-9][0-9]|[0-9][0-9][0-9]|[0-9][0-9]|[0-9])
      #if [[ $timeout -lt 3 ]]; then
      #   echo "Wrong argument: $2 - Please give a timeout in seconds (3-32767)."
      #   exit 1
      #fi
      timeout=$2
      shift
      ;;
    *)
      echo "Wrong argument: $2 - Please give a timeout in seconds (3-32767). See -h for more help."
      exit 1
      ;;
    esac
    ;;
  *)
    printf "Wrong argument: %s\n$usage -- See -h for more help.\n" "$1"
    exit 1
    ;;
  esac
  shift
done

case $(ps -o stat= -p $$) in
*+*)
  #foreground
  ;;
*)
  output=
  ;;
esac

log() {
  if [[ $output -ge 1 ]]; then
    printf "%s\n" "$@"
  fi
}

sendNoteF() {
  if [[ -n $sendNote ]]; then
    note -m "$*" || echo "This script has a dependency to \"note\" to send notification messages."
  fi
}

fail() {
  sendNoteF "$* failed!"
  log "$* failed!"
  exit 1
}

elapsedTime=
lastOutput=-4
shouldOutput=false
setShouldOutput() {
  elapsedTime=$(($(date "+%s") - starttime))
  [[ $output -ge 3 ]] && echo "elapsedTime: $elapsedTime, lastOutput: $lastOutput"
  if [[ $((elapsedTime - lastOutput)) -ge 3 ]]; then
    lastOutput=$elapsedTime
    shouldOutput=true
  else
    shouldOutput=false
  fi
 # echo "shouldOutput: $shouldOutput"
}

function turnWifiOn() {
  [[ $output -ge 3 ]] && echo "Wi-Fi ($wifiDevice) \"Off\" detected!"
  log "Toggling Wi-Fi ($wifiDevice) on ..."
  networksetup -setairportpower "$wifiDevice" on || fail "Toggling Wi-Fi on"
}

#toggle wifi on
wifiDeviceStatus=$(networksetup -getairportpower "$wifiDevice")
if [[ $? -ne 0 ]]; then
  wifiDevice=$(networksetup -listallhardwareports | grep -A 2 "Wi-Fi" | grep "Device" | awk '{print $2}')
  wifiDeviceStatus=$(networksetup -getairportpower "$wifiDevice")
fi
if [[ -n $(echo "$wifiDeviceStatus" | grep Off) ]]; then
  turnWifiOn
else
  #for preformance, first test if internet connection is established
  # performance: 40ms more when not working, but 100ms less when working (and the letter is most of the times)
  netTest=$(ping -t 3 -c 1 8.8.8.8 2>/dev/null)
  if [[ $? -eq 0 ]]; then
    if [[ $output -gt 1 ]]; then
      echo 'Internet connection avaliable!'
    fi
    exit 0
  fi
fi

elapsedTime=0
ssid_estabilshed=
while true; do
  #test on ssid connected
  ssid=$(/System/Library/PrivateFrameworks/Apple80211.framework/Versions/A/Resources/airport -I | sed -n 13p)
  if [[ -z "$ssid" ]]; then
    if [[ -n $(networksetup -getairportpower "$wifiDevice" | grep Off) ]]; then
      log "Wifi turned off."
      turnWifiOn
    else
      log "WTF-Error: Unknown state: airport reports no ssid result, but networksetup tells wiki device ($wifiDevice) is not Off."
      exit 1
    fi
  elif [[ ${#ssid} -lt 19 ]]; then
    if [[ -n "$ssid_estabilshed" ]]; then
      log "Connection to $ssid_estabilshed lost."
      ssid_estabilshed=
    fi
    if [[ -z $sendNote && $elapsedTime -ge $timeout ]]; then
      [[ -n "$ssid" && $output -ge 2 ]] && echo "airport -I:" $ssid
      fail "Timeout: Auto-connecting to a SSID"
    fi
    waitflag=1
    setShouldOutput
    if [[ $shouldOutput == "true" ]]; then
      log "Waiting for SSID ..."
    fi
    sleep 1
  else
    [[ $output -ge 3 ]] && echo "waitflag: $waitflag"
    if [[ $output -ge 1 && $waitflag -eq 1 ]]; then
      ssid_estabilshed=$(echo "${ssid}" | xargs)
      log "Connected to $ssid_estabilshed"
    fi
    if [[ -z $sendNote && $elapsedTime -ge $timeout ]]; then
      [[ -n "$netTest" && $output -ge 1 ]] && echo "$netTest" | tail -1
      fail "Timeout: Internet connection detection"
    fi
    #test on internet connection
    netTest=$(ping -t 3 -c 1 8.8.8.8 2>&1 >/dev/null)
    if [[ $? -ne 0 ]]; then
      [[ $output -ge 3 ]] && echo "ping output: $netTest"
      waitflag=2
      setShouldOutput
      if [[ $shouldOutput == "true" ]]; then
        log "Waiting for internet connection ..."
      fi
      sleep 1
    else
      sendNoteF 'Internet connection avaliable!'
      if [[ $output -ge 1 || -n $waitflag ]]; then
        log 'Internet connection available!'
      fi
      exit 0
    fi
  fi
done
