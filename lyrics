#!/bin/bash

CURL=(curl -sS -A 'Firefox/64.0' -H "Accept-Language: de,en-US;q=0.7,en;q=0.3")
sites="songtexte.com songlyrics.com musixmatch.com azlyrics.com genius.com plyrics.com"
#Search with ecosia for (compatibility with special characters and) easier grep
GOOG_URL='https://www.ecosia.org/search'
ARTIST=
TITLE=
VERBOSE=
QUIET=
AUTOSELECT=2 # 0 = ask always, 1 = ask if no match found, 2 = ask if no match found in all sites
usage="Usage: \e[1m$(basename $0)\e[0m -h | [-v] [-a] [-q] [ (spotify|rbox|rhythmbox) | \e[4mtitle\e[0m [\e[4martist\e[0m] | \e[4murl\e[0m ]"
help="Find out the song lyrics for a given or currently playing song.
$usage
	\e[1m-h\e[0m		Display this message and exit.
	\e[1m-v\e[0m, \e[1m--verbose\e[0m	Produce debugging output.
	\e[1m-a\e[0m, \e[1m--ask\e[0m	Disable autoselection.
	\e[1m-q\e[0m, \e[1m--quiet\e[0m	Suppress most messages.

You can specify the song source in three ways:
	1.  Give \"spotify\" or \"rhythmbox\" of fetching currently played song from there.
	    Argument \"spotify\" is the default, if no argument is given.
	2.  Give a \e[4mtitle\e[0m and an optional \e[4martist\e[0m to search lyrics for.
	3.  Give an \e[4murl\e[0m to one of the known lyrics sources.
The implemented lyrics sources are: ${sites[@]}

Dependency to \"recode\", \"pup\" and \"node\".
"

# prevent sed error on bad encoded characters by reading as ascii (test for failing (greek text): https://www.musixmatch.com/lyrics/Vangelis-Kakouriotis/Na-M-Agapas)
LC_CTYPE=C
LANG=C

#TODO: html encode for musixmatch -> title and artist matching individually for each site

# adding new lyrics sites:
#  add new site hostname to $sites
#  find xml-elements directly before and after the text
#  add ${site%.*} function name with an awk matching pattern
#  add filter for lyrics-sites to google function if applicable
#  add filter for site-specific non-lyrics line-contents (awk grep only whole lines, so every outside of diamons is shown)

die() {
  mes=$1
  shift
  printf "$mes\n" "$*"
  exit 1
}

# This is used to get the url for the lyrics
function google {
  local site=$1
  shift
  local query="$* site:${site}"

  #add v for more information about headers
  stream=$("${CURL[@]}" -GLm 10 ${GOOG_URL} --data-urlencode "q=$query")
  if [[ -n $VERBOSE ]]; then
    if [[ ${#stream} -lt 2000 ]]; then
      echo "Response may indicate failing:" >&2
      printf "%s" "$stream" | xargs -L 1 printf "\t%s" >&2
    fi
    printf "\"%s\" " "${CURL[@]}" -GLm 10 ${GOOG_URL} --data-urlencode "q=$query" >&2
    echo >&2
  fi
  res=$(echo "$stream" | pup ".result-url attr{href}")
  #echo "$res" >&2
  if [[ -n $(echo "$res" | grep "songtexte\.com") ]]; then
    res=$(echo "$res" | grep "/songtext/")
  elif [[ -n $(echo "$res" | grep "azlyrics\.com") ]]; then
    res=$(echo "$res" | grep "/lyrics/")
  elif [[ -n $(echo "$res" | grep "songlyrics\.com") ]]; then
    res=$(echo "$res" | grep -- "-lyrics/")
  elif [[ -n $(echo "$res" | grep "genius\.com") ]]; then
    res=$(echo "$res" | grep -- "-lyrics")
  elif [[ -n $(echo "$res" | grep "musixmatch\.com") ]]; then
    res=$(echo "$res" | grep "/lyrics/")
  fi
  echo "$res"
}

# get resulting text from website
function fetchResult() {
  [[ -z "$QUIET" ]] && echo "open $1" >&2

  #test if url exists, print http state
  if [[ -n $VERBOSE ]]; then
    echo >&2
    printf "Fetching header: " >&2
    printf "%q " "${CURL[@]}" >&2
    echo "-SI \"$1\"" >&2
  fi
  testUrl=$("${CURL[@]}" -SI "$1" 2>&1)
  state=$(echo "$testUrl" | sed -n 1p)
  if [[ $state != *200* ]]; then
    if [[ $state == *301* ]]; then
      [[ -z "$QUIET" ]] && echo "$state" >&2
      link=$(echo "$testUrl"  | grep 'Location: ' | grep -oi 'https\?://\S*')
      fetchResult "$link" "$2"
      return;
    fi
    printf "Error in fetching site: %s" "$state" >&2
    [[ ! -t 0 ]] && die

    res=$("${CURL[@]}" "$1");
    printf "\nDo you want to see details? (${#testUrl}/${#res}) (y/n) [n]: " >&2
    read ans
    case $ans in
    y)
      echo "Command: ${CURL[@]} \"$1\"" >&2
      echo "Command: ${CURL[@]} \"$1\"

Response-Header (${#testUrl}):
$testUrl

Response (${#res}):
$res" | less
      return
      ;;
    esac
  fi
  if [[ -n $VERBOSE ]]; then
    echo "******Response-Header (START)******" >&2
    printf "%s" "$testUrl" >&2
    echo "******Response-Header (END)********
" >&2
  else
    [[ -z "$QUIET" ]] && echo "$state" >&2
  fi

  #awk lyrics from site
  if [[ -n $VERBOSE ]]; then
    printf "Fetching lyrics: " >&2
    printf "%q " "${CURL[@]}" >&2
    echo "\"$1\"" >&2
  fi
  res=$("${CURL[@]}" "$1" | awk "$2");
  if [[ -n $VERBOSE ]]; then
    if [[ -n $res ]]; then
      echo "Lyrics in site found! (length: ${#res})" >&2
      # printf "%s\n" "$res" >&2
    else
      echo "Extracting lyrics failed on awk (or curl))!" >&2
      return;
    fi
  fi

  #remove site-specific non-lyrics line-contents
  if [[ -n $(echo "$1" | grep "musixmatch\.com") ]]; then
    res=$(echo "$res" | sed 's/.*<p class="mxm-lyrics__content ">//'| sed 's/<\/p>.*//')
  fi

  #further beautifying
  res=$(echo "$res" | node -e 'process.stdin.resume(); process.stdin.setEncoding("utf8");
       var content = "";

       process.stdin.on("data", function(chunk) {
           content+=chunk
       });

       process.stdin.on("end", function() {
         var result="";
         var nextchar = "";
         var skip = false;

         for (i = 0; i <= content.length; i++) {
           nextchar = content.charAt(i);
           // console.error(i + ": " + nextchar)

           if (skip) {
             if (nextchar == ">"){
               skip = false;
             }
           } else {
             switch (nextchar) {
               case "<":
                 skip = true;
                 break;
               default:
                 result+=nextchar;
             }
           }
         }
         console.log(result)
       });' \
      | recode html..latin1 \
      | grep -v "Zur deutschen Übersetzung" \
      | grep -v "Noch keine Übersetzung vorhanden." \
      | grep -v "Jetzt Übersetzung hinzufügen" \
      | grep -v "Leider kein Songtext vorhanden." \
      | grep -v "Jetzt Songtext hinzufügen" \
      | grep -v "Laden des Songtextes wird vorbereitet ..." \
      | perl -pe 's/^[ \t]+//' \
      | sed '/^$/N;/^\n$/D');

  if [[ -z $res ]]; then
    echo "There might be missing some lyrics..." >&2
  fi
}

function songtexte() {
  fetchResult "$1" '/<div id=\"lyrics\">/, /<div class=\"mobileShare/'
}

function songlyrics() {
  fetchResult "$1" '/<p id=\"songLyricsDiv\"/, /<\/p>/'
}

function musixmatch() {
  fetchResult "$1" '/<p class=\"mxm-lyrics__content \">/, /<\/p>/'
}

function azlyrics() {
  fetchResult "$1" '/<!-- Usage of azlyrics.com content by any third-party lyrics provider is prohibited by our licensing agreement. Sorry about that. -->/, /<\/div>/'
}

function genius() {
  fetchResult "$1" '/<div class=\"lyrics\">/, /<\/div>/'
}

function plyrics() {
  fetchResult "$1" '/start of lyric/, /end of lyric/'
}

function finishIt() {
  if [[ -n "$ARTIST" && -n "$TITLE" ]]; then
    if [[ -t 1 ]]; then
      printf "\n\e[1;4m%s - %s\e[0m\n" "$ARTIST" "$TITLE"
    else
      if [[ -n "$QUIET" ]]; then titleAndArtistDelim="  -  "; else titleAndArtistDelim=" - "; fi
      printf "%s%s%s\n" "$ARTIST" "$titleAndArtistDelim" "$TITLE"
      [[ -z "$QUIET" ]] && echo "Songtext piped (length: ${#res})." >&2
    fi
  fi
  #guarantee one newline before...
  if [[ ! "$res" =~ ^[[:space:]] ]]; then
    echo
  fi
  echo "$res"
  #... and one newline after
  if [[ ! "$res" =~ [[:space:]]$ ]]; then
    echo
  fi
  exit 0
}

function tryURL() {
  if [[ "$1" == "urlonly" ]]; then
    local urlonly=1
    shift
  fi
  for site in $sites; do
    if [[ "$(echo $1 | grep -i "https\?://.*$site")" ]]; then
      ${site%.*} "$1"
      if [[ -n $urlonly ]]; then
        if [[ -n $res ]]; then
          finishIt
        else
          die "Sorry, couldn't extract lyrics from that URL..."
        fi
      fi
    fi
  done

  if [[ -n $urlonly && -n $(echo "$1" | grep -E '^https?://(www\.)?[A-Za-z0-9-]*\.[A-Za-z0-9?\\+&@./#%=~_|-]*$') ]]; then
    die "Sorry, that site is not supported: $1\nMaybe you can add it. See in docs."
  fi
}

function postformat() {
  cat | iconv -c -f utf-8 -t ascii//translit | sed "s/[\"^'\`~]//g"
}

function withHyphen0() {
  echo "$*" | sed 's/ /-/g' | sed 's/[+*,/\?\$]//g' | sed 's/-\{2,\}/-/g'
}

function withHyphen() {
  withHyphen0 $(echo "$*" | sed "s/'/-/g" | sed "s/&//g") | postformat
}

function withHyphen2() {
  withH=$(withHyphen0 $(echo "$*" | sed "s/'/-/g" | sed "s/&//g"))
  perl -MURI::Escape -e 'print uri_escape($ARGV[0]);' "$withH"
}

function withHyphen3() {
  withHyphen0 $(echo "$*" | sed "s/'//g" | sed "s/&/and/g") | postformat
}

function noSpaces() {
  echo "$*" | sed 's/[+*,/\?\$& ]//g' | sed "s/'//g" | postformat
}

function preformat() {
  echo "$*" | sed 's/(.*)//g' | sed 's/\[.*\]//g' | sed 's/ - .*//g' | sed 's/\.\{1,\}/-/g' | sed 's/ \{1,\}/ /g' | sed 's/-*//'
}

function findLyrics() {
  [[ -z "$TITLE" ]] && die "No title given (artist: \"$ARTIST\")!"
  echo "Artist: $ARTIST
Title: $TITLE" >&2
  [[ -z "$QUIET" ]] && echo >&2

  tileInUrl=$(preformat $TITLE | sed 's/ - [Ll]ive.*//g')
  titleWithHyphen=$(withHyphen $tileInUrl)
  titleWithHyphen2=$(withHyphen2 $tileInUrl)
  titleWithHyphen3=$(withHyphen3 $tileInUrl)
  titleNoSpaces=$(noSpaces $tileInUrl)

  artistInUrl=$(preformat $ARTIST)
  artistWithHyphen=$(withHyphen $artistInUrl)
  artistWithHyphen2=$(withHyphen2 $artistInUrl)
  artistWithHyphen3=$(withHyphen3 $artistInUrl)
  artistNoSpaces=$(noSpaces $artistInUrl)

  if [[ -n $VERBOSE ]]; then
    echo "******Debug matching title and artist******
titleInUrl: $tileInUrl
titleWithHyphen: $titleWithHyphen
titleWithHyphen2: $titleWithHyphen2
titleWithHyphen3: $titleWithHyphen3
titleNoSpaces: $titleNoSpaces

artistInUrl: $artistInUrl
artistWithHyphen: $artistWithHyphen
artistWithHyphen2: $artistWithHyphen2
artistWithHyphen3: $artistWithHyphen3
artistNoSpaces: $artistNoSpaces
********************************************" >&2
  fi

  # Tell if artist conversion failed
  if [[ -n "$ARTIST" && -z "$artistWithHyphen" && -z "$artistWithHyphen2" && -z "$artistNoSpaces" ]]; then
    echo "Couldn't convert artist name to ascii. Please give it in latin characters." >&2
  fi

  # Title must not be empty
  if [[ -z "$titleWithHyphen" && -z "$titleWithHyphen2" && -z "$titleWithHyphen3" && -z "$titleNoSpaces" ]]; then
    die "Couldn't convert title to ascii. Please give it in latin characters. It must not be empty, so exiting now." >&2
  fi

  OVERALL=()
  for site in $sites; do
    if [[ -z "$QUIET" ]]; then
      printf "Looking for lyrics at %s: " "$site" >&2
      [[ -n $VERBOSE ]] && echo >&2
    fi

    ALL=($(google "$site" "$ARTIST $TITLE lyrics"));
    #skip if no results found
    if [[ -z ${ALL[@]} ]]; then
      [[ -z "$QUIET" ]] && echo "No results. Lets try another..." >&2
      continue;
    fi

    if [[ "$AUTOSELECT" -gt 1 || ! -t 0 ]]; then
      # try to validate self
      # only title is required (grep would pass everything through if both empty)
      for resURL in "${ALL[@]}"; do
        if [[ ( -n "$titleWithHyphen" && -n $(echo "$resURL" | grep -i -e "$titleWithHyphen" | grep -i -e "$artistWithHyphen") )
          || ( -n "$titleNoSpaces" && -n $(echo "$resURL" | grep -i -e "$titleNoSpaces" | grep -i -e "$artistNoSpaces") )
          || ( -n "$titleWithHyphen2" && -n $(echo "$resURL" | grep -i -e "$titleWithHyphen2" | grep -i -e "$artistWithHyphen2") )
          || ( -n "$titleWithHyphen3" && -n $(echo "$resURL" | grep -i -e "$titleWithHyphen3" | grep -i -e "$artistWithHyphen3") ) ]]; then
          [[ -z "$QUIET" ]] && echo "Lyrics found!" >&2

          ${site%.*} $resURL

          if [[ -n $res ]]; then
            finishIt
          else
            [[ -z "$QUIET" ]] && echo "Well, that URL sucked. Lets try another..." >&2
          fi
        elif [[ -n $VERBOSE ]]; then
          echo "URL not matching: $resURL" >&2
        fi
      done
      [[ -z "$QUIET" ]] && echo "No matching site found. Lets try another site..." >&2

      #add ALL to OVERALL and try to find in next site
      OVERALL+=("${ALL[@]}")
    else
      [[ -z "$QUIET" ]] && echo "${#ALL[@]} results found." >&2
      while [[ -n "${ALL[@]}" ]]; do
        j=1
        for resURL in ${ALL[@]}; do
          if [[ ( -n "$titleWithHyphen" && -n $(echo "$resURL" | grep -i -e "$titleWithHyphen" | grep -i -e "$artistWithHyphen") )
            || ( -n "$titleNoSpaces" && -n $(echo "$resURL" | grep -i -e "$titleNoSpaces" | grep -i -e "$artistNoSpaces") )
            || ( -n "$titleWithHyphen2" && -n $(echo "$resURL" | grep -i -e "$titleWithHyphen2" | grep -i -e "$artistWithHyphen2") )
            || ( -n "$titleWithHyphen3" && -n $(echo "$resURL" | grep -i -e "$titleWithHyphen3" | grep -i -e "$artistWithHyphen3") ) ]]; then

            if [[ "$AUTOSELECT" -gt 0 ]]; then
              [[ -z "$QUIET" ]] && echo "Lyrics found!" >&2

              ${site%.*} $resURL

              if [[ -n $res ]]; then
                finishIt
              else
                echo "Well, that URL sucked. Lets try another..." >&2
              fi
            else
              echo "$j: $resURL (!)" >&2
            fi
          else
            echo "$j: $resURL" >&2
          fi
          ((j++))
        done
        printf "Is there any link right? (1-${#ALL[@]} / c (continue) / q (quit)) [c]: " >&2
        read ans
        if [[ $ans =~ ^[0-9]+$ ]]; then
          if [[ $ans -le ${#ALL[@]} ]]; then
            ((ans--))
            tryURL "${ALL[$ans]}"

            if [[ -n $res ]]; then
              finishIt
            else
              echo "Well, that URL sucked. Lets try another..." >&2
              echo "DEBUG: $res" >&2
              #remove that URL from OVERALL
              ALL=("${ALL[@]:0:$ans}" "${ALL[@]:((ans+1))}")
            fi
          else
            die "That number was too high..."
          fi
        elif [[ -z "$ans" || "$ans" == c ]]; then
          continue 2;
        else
          # q or any other not c and non-integer
          exit 0;
        fi
      done
    fi
  done

  if [[ "$AUTOSELECT" -gt 0 ]]; then
    printf "No matching site found in all sites. " >&2
  fi

  # implicit if autoselect -gt 0
  if [[ -t 0 && -n ${OVERALL[@]} ]]; then
    echo "Anyway, some sites where found:" >&2
    while [[ -n "${OVERALL[@]}" ]]; do
      j=1
      for resURL in ${OVERALL[@]}; do
        echo "$j: $resURL" >&2
        ((j++))
      done
      printf "Is there any link right? (1-${#OVERALL[@]} / q (quit)) [q]: " >&2
      read ans
      if [[ $ans =~ ^[0-9]+$ ]]; then
        if [[ $ans -le ${#OVERALL[@]} ]]; then
          ((ans--))
          tryURL "${OVERALL[$ans]}"

          if [[ -n $res ]]; then
            finishIt
          else
            echo "Well, that URL sucked. Lets try another..." >&2
            #remove that URL from OVERALL
            OVERALL=("${OVERALL[@]:0:$ans}" "${OVERALL[@]:((ans+1))}")
          fi
        else
          die "That number was too high..."
        fi
      elif [[ -z $ans ]]; then
        break;
      else
        # q or any other non-integer
        exit 0;
      fi
    done
  fi

  [[ -z "$QUIET" ]] && echo "Ooops, no site left. " >&2

  #if [[ -e /usr/local/opt/bash-snippets/bin/lyrics && -n "$ARTIST" ]]; then
  #  echo "Last chance: lyrics from bash-snippets" >&2
  #  /usr/local/opt/bash-snippets/bin/lyrics -a "$ARTIST" -s "$TITLE" && exit 0
  #fi
  echo "Givin' up now :(" >&2

  #Get searching site for copy & paste
  #Replace &, " and space
  if [[ -n "$ARTIST" ]]; then
    Q="$ARTIST $TITLE lyrics"
  else
    Q="$TITLE lyrics"
  fi
  Q=${Q//&/%26}
  Q=${Q//\"/%22}
  Q=${Q//\ /+}
  echo "${GOOG_URL}?q=$Q" >&2
}

################################################################################
# Look up the title and artist in spotify
################################################################################
function lookupSpotifyInfo() {
  [[ -z "$QUIET" ]] && echo "Looking up lyrics by Spotify artist and title..." >&2
  # Checks $OSTYPE to determine the proper command for artist/title query
  if [[ "$OSTYPE" == "linux-gnu" ]]; then
    ARTIST="$(dbus-send --print-reply --session --dest=org.mpris.MediaPlayer2.spotify /org/mpris/MediaPlayer2 \
      org.freedesktop.DBus.Properties.Get string:'org.mpris.MediaPlayer2.Player' string:'Metadata' \
        | grep -A 3 artist | grep string | grep -v xesam | sed 's/^\s*//' | cut -d ' ' -f 2- \
          | tr '(' ' ' | tr ')' ' ' | tr '"' ' ' )";
    TITLE="$(dbus-send --print-reply --session --dest=org.mpris.MediaPlayer2.spotify /org/mpris/MediaPlayer2 \
      org.freedesktop.DBus.Properties.Get string:'org.mpris.MediaPlayer2.Player' string:'Metadata' \
        | grep -A 3 title | grep string | grep -v xesam | sed 's/^\s*//' | sed 's/^variant\s*//' \
          | cut -d ' ' -f 2- | tr '(' ' ' | tr ')' ' ' | tr '"' ' ' )";
  elif [[ "$OSTYPE" == "darwin"* ]]; then
    #precautionally open it
    if ! pgrep Spotify >/dev/null; then
      echo "Opening Spotify at first ..." >&2
      open -j /Applications/Spotify.app/ && sleep 3
    fi
    ARTIST="$(osascript -e 'tell application "Spotify" to artist of current track as string')";
    TITLE="$(osascript -e 'tell application "Spotify" to name of current track as string')";
  else
    echo "Your OS doesn't appear to be supported" >&2
  fi

  if [[ -z "$ARTIST" || -z "$TITLE" ]]; then
    die "There was a problem getting the currently playing info from spotify"
  fi
}

################################################################################
# Look up the song info for the currently playing song in Rhythmbox
################################################################################
function lookupRhythmboxInfo() {
  [[ -z "$QUIET" ]] && echo "Looking up title by Rhythmbox artist and title..." >&2
  ARTIST="$(rhythmbox-client --print-playing-format %ta)";
  TITLE="$(rhythmbox-client --print-playing-format %tt)";
}

################################################################################
# Main (Arg parsing crap)
################################################################################
while [[ -n $1 ]]; do
  case $1 in
  -h|--help)
    printf "$help"
    exit 0
    ;;
  -v|--verbose)
    VERBOSE=true
    shift
    ;;
  -q|--quiet)
    QUIET=true;
    shift
    ;;
  -a|--ask)
    AUTOSELECT=0
    shift
    ;;
  -*)
    printf "Unknown Argument: %s\n$usage -- " "$1"
    die "See -h for more help."
    ;;
  *)
    break
    ;;
  esac
done

case $1 in
rhythmbox|rbox)
  lookupRhythmboxInfo
  break;
  ;;
spotify)
  lookupSpotifyInfo
  break;
  ;;
*)
  waitnet -s >&2 || die
  # If given an url, just browse it
  tryURL "urlonly" "$1"
  if [[ -n "$1" ]]; then
    TITLE=$1
    ARTIST=$2
    [[ $AUTOSELECT != 0 ]] && AUTOSELECT=1
  else
    lookupSpotifyInfo
  fi
  ;;
esac

waitnet -s >&2 || die
findLyrics
