#!/bin/bash

usage="Usage: \e[1mtdl\e[0m -h | [-S[h]] [\e[4mdepth\e[0m]"
help="List directories with \"\e[1mtree\e[0m\".
$usage
	\e[1m-h\e[0m	Displays this message and exits.
	\e[1m-S\e[0m	Sort entries by size.
 	\e[1m-Sh\e[0m	Sort entries by size and make the size human-readable.
	\e[4mdepth\e[0m	Depth of directories listed (1 to 5; default: 1).
"

grep_it() {
  if [[ $1 =~ -?1 ]]; then
    echo "$dirtree" | grep -e "^.─"
  elif [[ $1 =~ -?2 ]]; then
    echo "$dirtree" | grep -e "^.─"  -e "^.   .─"
  elif [[ $1 =~ -?3 ]]; then
    echo "$dirtree" | grep -e "^.─" -e "^.   .─" -e "^.   .   .─"
  elif [[ $1 =~ -?4 ]]; then
    echo "$dirtree" | grep -e "^.─" -e "^.   .─" -e "^.   .   .─" -e "^.   .   .   .─"
  elif [[ $1 =~ -?5 ]]; then
    echo "$dirtree" | grep -e "^.─" -e "^.   .─" -e "^.   .   .─" -e "^.   .   .   .─" -e "^.   .   .   .   .─"
  fi
}

while [[ -n $1 ]]; do
  case $1 in
    [1-5])
      depth=$1
      ;;
    -[1-5])
      depth=$1;
      ;;
    -S)
      sort=1
      ;;
    -Sh|-hS)
      sort=2
      ;;
    -h)
      printf "$help"
      exit 0
      ;;
    *)
      printf "Wrong argument: %s\n$usage -- See -h for more help.\n" "$1"
      exit 1
      ;;
  esac
  shift
done

[[ -z $depth ]] && depth=1
#if [[ -z $depth ]]; then 
#  echo "Please give a number 1-5."
#  exit 1
#fi

sizeFormat() {
  if [[ $1 -ge 100000000000 ]]; then
    printf "%.0fG" $(echo "scale=1; $1/1000000000" | bc)
  elif [[ $1 -ge 10000000000 ]]; then
    printf "%.1fG" $(echo "scale=2; $1/1000000000" | bc)
  elif [[ $1 -ge 1000000000 ]]; then
    printf "%.2fG" $(echo "scale=3; $1/1000000000" | bc)
  elif [[ $1 -ge 100000000 ]]; then
    printf "%.0fM" $(echo "scale=1; $1/1000000" | bc)
  elif [[ $1 -ge 10000000 ]]; then
    printf "%.1fM" $(echo "scale=2; $1/1000000" | bc)
  elif [[ $1 -ge 1000000 ]]; then
    printf "%.2fM" $(echo "scale=3; $1/1000000" | bc)
  elif [[ $1 -ge 100000 ]]; then
    printf "%.0fK" $(echo "scale=1; $1/1000" | bc)
  elif [[ $1 -ge 10000 ]]; then
    printf "%.1fK" $(echo "scale=2; $1/1000" | bc)
  elif [[ $1 -ge 1000 ]]; then
    printf "%.2fK" $(echo "scale=3; $1/1000" | bc)
  else
    printf "$1B"
  fi
}

if [[ -n $sort ]]; then
  dirtree=$(tree -fapFN --du | grep /$)
  res="$(grep_it $depth)"
  res=$(echo "$res" | sed -e 's/[│   ]*.── \[d[-rwx]* //; s/\]//' | sort -r)
  if [[ $sort -gt 1 ]]; then
    IFS=$'\n'
    for entry in $res; do
      printf "%s\t%s\n" $(sizeFormat $(echo "$entry" | awk '{print $1}')) $(echo "$entry" | awk '{$1=""; print $0}')
    done
  else
    echo "$res"
  fi
else
  dirtree=$(tree -faphFN --du | grep /$)
  res="$(grep_it $depth)"
  echo "$res"
fi
