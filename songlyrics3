#!/bin/bash

CURL="curl -sSG -H 'User-Agent: Mozilla/5.0'";
sites="songtexte.com songlyrics.com genius.com azlyrics.com plyrics.com"
#Search with ecosia for (compatibility with special characters and) easier grep
GOOG_URL='https://www.ecosia.org/search'

#adding new lyrics sites:
#  add new site hostname to $sites
#  find xml-elements directly before and after the text
#  add ${site%.*} function name with a awk matching pattern
#  add filter for lyrics-sites to google function if applicable
#  add site to usage message

# This is used to get the url for the lyrics
function google {
  stream=$($CURL -Lm 10 ${GOOG_URL} --data-urlencode "q=$*")
  #echo "link: ${GOOG_URL}?q=$*" >&2
  res=$(echo "$stream" | grep -o "result-url\" href=\"[^\"]*" | sed 's/result-url" href="//')
  if [[ -n $(echo "$res" | grep "songtexte\.com") ]]; then
    res=$(echo "$res" | grep "/songtext/")
  elif [[ -n $(echo "$res" | grep "azlyrics\.com") ]]; then
      res=$(echo "$res" | grep "/lyrics/")
  elif [[ -n $(echo "$res" | grep "songlyrics\.com") ]]; then
      res=$(echo "$res" | grep -- "-lyrics/")
  elif [[ -n $(echo "$res" | grep "genius\.com") ]]; then
      res=$(echo "$res" | grep -- "-lyrics")
  fi
  echo "$res"
}

# get resulting text from website
function fetchResult() {
  echo "open $1" >&2

  #test if url exists
  testUrl=$(curl -sSI "$1" | sed -n 1p)
  echo $testUrl >&2

  res=$($CURL "$1" | awk "$2" \
      | node -e 'process.stdin.resume(); process.stdin.setEncoding("utf8");
       var content = "";

       process.stdin.on("data", function(chunk) {
           content+=chunk
       });

       process.stdin.on("end", function() {
         var result="";
         var nextchar = "";
         var skip = false;

         for (i = 0; i <= content.length; i++) {
           nextchar = content.charAt(i);
           // console.error(i + ": " + nextchar)

           if (skip) {
             if (nextchar == ">"){
               skip = false;
             }
           } else {
             switch (nextchar) {
               case "<":
                 skip = true;
                 break;
               default:
                 result+=nextchar;
             }
           }
         }
         console.log(result)
       });' \
      | perl -pe 's/^[ \t]+//' \
      | recode html..latin1 \
      | grep -v "Zur deutschen Übersetzung" \
      | grep -v "Noch keine Übersetzung vorhanden." \
      | grep -v "Jetzt Übersetzung hinzufügen" \
      | sed 's/^ *//g' \
      | sed '/^$/N;/^\n$/D');
#      | sed 's/’//g' \
#      | sed 's/‘//g' \
#      | sed 's/”/"/g' \
#      | sed 's/“/"/g' \
#      | sed 's/…/.../g' \
#      | sed 's/[fF][uU][cC][kK]/[32mF***[39m/g' \
#      | sed 's/[sS][hH][iI][tT]/[32mS***[39m/g' \
}

function songtexte() {
  fetchResult "$1" '/<div id=\"lyrics\">/, /<div class=\"mobileShare\">/'
}

function plyrics() {
  fetchResult "$1" '/start of lyric/, /end of lyric/'
}

function songlyrics() {
  fetchResult "$1" '/<p id=\"songLyricsDiv\"/, /<\/p>/'
}

function azlyrics() {
  fetchResult "$1" '/<!-- Usage of azlyrics.com content by any third-party lyrics provider is prohibited by our licensing agreement. Sorry about that. -->/, /<\/div>/'
}

function genius() {
  fetchResult "$1" '/<div class=\"lyrics\">/, /<\/div>/'
}

function finishIt() {
  if [[ -n $1 && -n $2 ]]; then
    printf "\n\e[1;4m%s - %s\e[0m\n" "$1" "$2"
  fi
  if [[ ! "$res" =~ ^[[:space:]] ]]; then
    echo
  fi
  echo "$res"
  if [[ ! "$res" =~ [[:space:]]$ ]]; then
    echo
  fi
  exit 0;
}

function findLyrics() {
  echo "Artist: $1"
  echo "Title: $2"
  echo

  for site in $sites; do
    printf "Looking for lyrics at %s: " "$site"
    ALL=($(google "$1 $2 lyrics site:$site"));
    if [[ -z $ALL ]]; then
      echo "No results. Lets try another...";
      continue;
    fi
    URL="$(echo "${ALL[*]}" | tr ' ' '\n' | grep -e "$site" -m 1)";

    # try to validate self
    tileInUrl=$(echo "$2" | sed -e 's/(.*)//g' -e "s/'//g")
    titleWithHyphen=$(echo "$tileInUrl" | sed 's/ /-/g')
    titleNoSpaces=$(echo "$tileInUrl" | sed 's/ //g')
    artistInUrl=$(echo "$1" | sed -e 's/(.*)//g' -e "s/'//g")
    artistWithHyphen=$(echo "$artistInUrl" | sed 's/ /-/g')
    artistNoSpaces=$(echo "$artistInUrl" | sed 's/ //g')
    # not not possible, ask for the right one
    if [[ -z $(echo "$URL" | grep -i "$titleWithHyphen" | grep -i "$artistWithHyphen") && -z $(echo "$URL" | grep -i "$titleNoSpaces" | grep -i "$artistNoSpaces") ]]; then
      echo
      if [[ -n "$URL" ]]; then
        echo "$URL"
        printf "Is that right? (y/n) [y]: "
        read ans
        case $ans in
          y|"")
            dontaskall=true
            ;;
        esac
        ALL=("${ALL[@]:1}")
      fi
      if [[ -z $dontaskall ]]; then
        if [[ ${#ALL[@]} -eq 0 ]]; then
          continue;
        fi
        j=1
        for resURL in ${ALL[@]}; do
          echo "$j: $resURL"
          ((j++))
        done
        printf "So which one is right? (1-${#ALL[@]} / n (= proceed to next site)) [n]: "
        read ans
        if [[ $ans =~ ^[0-9]+$ && $ans -le ${#ALL[@]} ]]; then
          URL="${ALL[((ans-1))]}"
        else
          continue;
        fi
      fi
    else
      printf "Lyrics found!\n"
    fi

    ${site%.*} $URL

    if [[ -n $res ]]; then
      finishIt "$1" "$2"
    else
      echo "That URL sucked. Lets try another...";
    fi
  done
  echo "Ooops, no site left. Givin' up now :("

  #Get searching site for copy & paste
  #Replace &, " and space
  Q="$1 $2 lyrics"
  Q=${Q//&/%26}
  Q=${Q//\"/%22}
  Q=${Q//\ /+}
  echo "${GOOG_URL}?q=$Q"
}

################################################################################
# Look up the title and artist in spotify
# Sets the global ARTIST and TITLE varibles
################################################################################
function lookupSpotifyInfo() {
  # Checks $OSTYPE to determine the proper command for artist/title query
  if [[ "$OSTYPE" == "linux-gnu" ]];then
    ARTIST="$(dbus-send --print-reply --session --dest=org.mpris.MediaPlayer2.spotify /org/mpris/MediaPlayer2 \
		org.freedesktop.DBus.Properties.Get string:'org.mpris.MediaPlayer2.Player' string:'Metadata' \
			| grep -A 3 artist | grep string | grep -v xesam | sed 's/^\s*//' | cut -d ' ' -f 2- \
				| tr '(' ' ' | tr ')' ' ' | tr '"' ' ' )";
    TITLE="$(dbus-send --print-reply --session --dest=org.mpris.MediaPlayer2.spotify /org/mpris/MediaPlayer2 \
		org.freedesktop.DBus.Properties.Get string:'org.mpris.MediaPlayer2.Player' string:'Metadata' \
			| grep -A 3 title | grep string | grep -v xesam | sed 's/^\s*//' | sed 's/^variant\s*//' \
				| cut -d ' ' -f 2- | tr '(' ' ' | tr ')' ' ' | tr '"' ' ' )";
  elif [[ "$OSTYPE" == "darwin"* ]];then
    ARTIST="$(osascript -e 'tell application "Spotify" to artist of current track as string')";
    TITLE="$(osascript -e 'tell application "Spotify" to name of current track as string')";
  else
    echo "Your OS doesn't appear to be supported"
  fi

  if [[ -z "$ARTIST" || -z "$TITLE" ]];then
    echo "There was a problem getting the currently playing info from spotify";
    exit 1;
  fi
}

################################################################################
# Look up the song info for the currently playing song in Rhythmbox
# Sets the global ARTIST and TITLE varibles
################################################################################
function lookupRhythmboxInfo() {
  # This is a nasty one-liner that returns data like this:
  # string "artist"
  # variant             string "City and Colour"
  # --
  # string "title"
  # variant             string "Like Knives"

  ALL="$(dbus-send --print-reply --dest=org.gnome.Rhythmbox /org/gnome/Rhythmbox/Shell \
           org.gnome.Rhythmbox.Shell.getSongProperties string:$(dbus-send --print-reply --dest=org.gnome.Rhythmbox \
           /org/gnome/Rhythmbox/Player org.gnome.Rhythmbox.Player.getPlayingUri | grep string | sed 's/^\s*//g' \
           | cut -d ' ' -f 2 | sed 's/"//g') | sed 's/^\s*//' | grep 'string "artist"\|string "title"' -A 1)";

  # Get the Artist out of the dbus call
  ARTIST="$(echo  "$ALL" | grep artist -A 1  | grep variant | cut -d ' ' -f 15- | sed 's/"//g')";
  # Get the Title out of the dbus call
  TITLE="$(echo "$ALL" | grep title -A 1  | grep variant | cut -d ' ' -f 15- | sed 's/"//g')";
}

################################################################################
# Usage info
################################################################################
function usage() {
  echo "$(basename $0) - Find out the songlyrics for a currently playing song.

This script is capable of finding out the Artist and Title of the currently
playing song. If, you are using Rhythmbox or Spotify. See usage message below.

Do it like this:
  $(basename $0) <artist> <title>       - To display lyrics for a song
  $(basename $0) spotify                - To look up info for the currently playing song in Spotify
  $(basename $0) rhythmbox|rbox         - To look up info for the currently playing song in Rhythmbox
  $(basename $0) <azlyrics.com url>     - To display the lyrics from a given azlyrics.com url
  $(basename $0) <songlyrics.com url>   - To display the lyrics from a given songlyrics.com url
  $(basename $0) <plyrics.com url>      - To display the lyrics from a given plyrics.com url
  $(basename $0) <songtexte.com url>    - To display the lyrics from a given songtexte.com url

Dependency to \"recode\"."

  # Print the args if any were passed
  if [[ -n "$1" ]];then
    echo -e "\nERROR:\n$1"
  fi
  exit 0;
}

################################################################################
# Main (Arg parsing crap)
################################################################################

# If given an url, just browse it
for site in $sites; do
  if [[ "$(echo $1 | grep -i "https\?://.*$site")" ]]; then
    ${site%.*} "$1"
    finishIt
  fi
done

# else see which function is wanted
case $1 in
  rhythmbox|rbox)
    lookupRhythmboxInfo
    echo "Looking up title by Rhythmbox artist and title...";
    findLyrics "$ARTIST" "$TITLE";
    ;;
  spotify)
    lookupSpotifyInfo
    echo "Looking up title by Spotify artist and title...";
    findLyrics "$ARTIST" "$TITLE";
    ;;
  *)
    # 1=Artist 2=Title
    if [[ -n "$1" && -n "$2" ]]; then
      findLyrics "$1" "$2";
    else
      usage
    fi
    ;;
esac
