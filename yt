#!/bin/bash

DEBUG=""
youtube="https://www.youtube.com"
site=""
query=""
declare -a LINKS
declare -a RESULTS
usage="Usage: \e[1m$(basename $0)\e[0m -h | -l | \e[4msite\e[0m [\e[4mseries\e[0m] | -u \e[4muser\e[0m [\e[4mseries\e[0m] | \e[4mquery\e[0m \e[4m...\e[0m"
help="Commandline interaction with YouTube.
$usage
	\e[1m-h\e[0m		Displays this message and exists.
	\e[1m-l\e[0m		Print all aliases associated with this script.
	\e[1m-d\e[0m		Debug mode: Don't open any link, but print it out.
	\e[4msite\e[0m		Videos site (from user or channel) to grep videos from.
	\e[4mseries\e[0m		Filters for special series containing \e[4mseries\e[0m (case insensitive).
	\e[1m-u\e[0m \e[4muser\e[0m		Give a \e[4muser\e[0m name to grep videos from.
	\e[1m-c\e[0m \e[4mchannel\e[0m	Give a \e[4mchannel\e[0m to grep videos from.
	\e[4mquery\e[0m		Search a specified query on YouTube.
"
while [[ -n $1 ]]; do
  case "$1" in
  -h)
    printf "$help"
    exit 0
    ;;
  -l)
    [[ -r ~/.aliases ]] && source ~/.aliases || source ~/.bashrc
    alias | grep "=\'yt\ " | sed 's/alias //g;s/=.*//g'
    exit 0
    ;;
  -d)
    DEBUG=true
    ;;
  -u)
    shift
    [[ -z "$1" ]] && {
      echo "Please give a user name with option -u. See -h for more help."
      exit 1
    }
    site="${youtube}/user/${1}/videos"
    ;;
  -c)
    shift
    [[ -z "$1" ]] && {
      echo "Please give a channel with option -c. See -h for more help."
      exit 1
    }
    site="${youtube}/channel/${1}/videos"
    ;;
  -*)
    printf "Wrong argument: %s\n$usage -- See -h for more help.\n" "$1"
    exit 1
    ;;
  *)
    [[ -z "$site" ]] && {
      site=$1
      shift
    }
    query="$*"
    break;
    ;;
  esac
  shift
done

function parseLinks0() {
  echo "$1" | pup --charset utf8 "div h3 a[title*=${2}I]" | grep -o 'href="/watch?v=[^"]*' | sed 's/href="/https:\/\/www.youtube.com/'
}

function parseLinks() {
  # https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors
  local tmp_links=$(parseLinks0 "$1" "$2")
  if [[ -n $DEBUG ]]; then
    local all_links=$(parseLinks0 "$1" "")
    printf "All links:\n%s\n" "$all_links"
    printf "Filtered links:\n%s\n" "$LINKS"
  fi
  LINKS=(${tmp_links})
}

function parseResults0() {
  local json=$(echo "$1" | pup --charset utf8 '.yt-lockup-content json{}')
  node -e "
    const json = JSON.parse(process.argv[1]);
    for (let el of json) {
      const title = el.children[0].children;
      if ('$2' && title[0].text.toLowerCase().indexOf('$2'.toLowerCase()) === -1) continue;
      //console.error(title[0].text)
      const info = el.children[1].children[0].children;
      console.log(title[0].text + ' \033[2m' + title[1].text + '\033[0m \033[37m' + info[1].text + ' \033[2m' + info[0].text + '\033[0m')
      console.log('$youtube' + title[0].href)
    }" "$json" \
    | perl -MHTML::Entities -pe 'decode_entities($_);'
}

function parseResults() {
  local tmp_parsed=$(parseResults0 "$1" "$2")
  local tmp_results=$(echo "$tmp_parsed" | sed -n 'p;n')
  IFS=$'\n' RESULTS=(${tmp_results})
  local tmp_links=$(echo "$tmp_parsed" | sed -n '1d;p;n')
  IFS=$'\n' LINKS=(${tmp_links})

  if [[ -n $DEBUG ]]; then
    local all_results=$(parseResults0 "$1")
    printf "All results:\n%s\n" "$all_results"
    printf "Filtered results:\n%s\n" "$tmp_parsed"
  fi

  if [[ ${#RESULTS[@]} -eq 0 ]]; then
    if [[ -n $2 ]]; then
      echo "No results found for \"$2\". Try another."
      exit 1
    else
      echo "No results found. Probably a script failure."
      exit 1
    fi
  fi
}

# fetch videos from youtube site $1, filtered by optional query $2
function fetchVideos() {
  waitnet -s || exit 1
  local src=$(curl -sS "$1")
  if [[ -n $src ]]; then
    local content=$(echo "$src" | pup --charset utf8 '.yt-lockup-content')

    # trouble shooting
    if [[ -z "$content" ]]; then
      local channel_empty=$(echo "$src" | pup '.channel-empty-message')
      [[ -n "$channel_empty" ]] && {
        if [[ $1 = */user/* ]]; then
          printf "Bad username: %s\n" $(echo "$1" | sed -e 's/.*\/user\///' -e 's/\/videos//')
        else
          echo "Channel does not exist: $1"
        fi
        exit 1
      }
      local title=$(echo "$src" | pup --charset utf8 'title text{}')
      echo "No content found: $title: $1"
      exit 1
    fi

#    parseLinks "$content" "$2"
    parseResults "$content" "$2"

    if [[ ${#RESULTS[@]} != ${#LINKS[@]} ]]; then
      printf "WTF-Error: %d titles, but %d links!\n" ${#RESULTS[@]} ${#LINKS[@]}
      echo "RESULTS:"
      printf '%s\n' "${RESULTS[@]}"
      echo "LINKS:"
      printf '%s\n' "${LINKS[@]}"
      exit 1
    fi
  else
    echo "Fetching from $1 failed."
    exit 1
  fi
}

function printResults() {
  cnt=0
  IFS=$'\n'
  for idx in "${!RESULTS[@]}"; do
    printf "%s: %s\n" "$idx" "${RESULTS[$idx]}"
  done
}

function askForChoose() {
  if [[ $1 = true ]]; then
    printResults
  fi

  if [[ ${#RESULTS[@]} -eq 1 ]]; then
    printf "Only one result found. Do you want to open it? (y/n) [y]: "
    read ans
    case $ans in
      ""|j|y|J|Y|Yes)
        if [[ -z $DEBUG ]]; then
          f -i "${LINKS[0]}"
        else
          echo "f -i ${LINKS[0]}"
        fi
      ;;
      *)
      ;;
    esac
    exit 0
  else
    printf "Which one do you want to open? (1-%d) [1]: " ${#RESULTS[@]}
    read ans
    [[ -z "$ans" ]] && ans=1
    if [[ $ans =~ ^[0-9]+$ ]]; then
      if [[ $ans -gt 0 && $ans -le ${#RESULTS[@]} ]]; then
        result=${LINKS[${ans}]}
        if [[ -z $DEBUG ]]; then
          f "$result"
        else
          echo "f $result"
        fi
        [[ $ans -eq 1 ]] && exit 0
      else
        echo "Wrong answer. Integer is zero or too high: $ans."
        exit 1
      fi
    else
      echo "Nothing opened."
      exit 0
    fi
  fi
}

if [[ "$site" = ${youtube}* ]]; then
  if [[ "$site" = */videos ]]; then
    fetchVideos "$site" "$query"
    askForChoose true
    while true; do
      askForChoose false
    done
  else
    [[ -n "$query" ]] && echo "Warning: query [${query}] will be ignored"
    if [[ -z $DEBUG ]]; then
      f -i "$site"
    else
      echo "f -i $site"
    fi
  fi
else
  if [[ -z $DEBUG ]]; then
    f yt "$site $query"
  else
    echo "f yt $site $query"
  fi
fi
