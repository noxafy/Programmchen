#!/bin/bash

DEBUG=""
youtube="https://www.youtube.com/"
site=""
query=""
usage="Usage: \e[1m$(basename $0)\e[0m -h | \e[4msite\e[0m [\e[4mseries\e[0m] | -u \e[4muser\e[0m [\e[4mseries\e[0m] | \e[4mquery\e[0m \e[4m...\e[0m"
help="Commandline interaction with YouTube.
$usage
	\e[1m-h\e[0m		Displays this message and exists.
	\e[1m-d\e[0m		Debug mode: Don't open any link, but print it out.
	\e[4msite\e[0m		Videos site (from user or channel) to grep videos from.
	\e[4mseries\e[0m		Filters for special series containing \e[4mseries\e[0m (case insensitive).
	\e[1m-u\e[0m \e[4muser\e[0m		Give a \e[4muser\e[0m name to grep videos from.
	\e[1m-c\e[0m \e[4mchannel\e[0m	Give a \e[4mchannel\e[0m to grep videos from.
	\e[4mquery\e[0m		Search a specified query on YouTube.
"
while [[ -n $1 ]]; do
  case "$1" in
  -h)
    printf "$help"
    exit 0
  ;;
  -d)
    DEBUG=true
    ;;
  -u)
    shift
    [[ -z "$1" ]] && {
      echo "Please give a user name with option -u. See -h for more help."
      exit 1
    }
    site="${youtube}user/${1}/videos"
    shift
    query="$*"
    ;;
  -c)
    shift
    [[ -z "$1" ]] && {
      echo "Please give a channel with option -c. See -h for more help."
      exit 1
    }
    site="${youtube}channel/${1}/videos"
    shift
    query="$*"
    ;;
  -*)
    printf "Wrong argument: %s\n$usage -- See -h for more help.\n" "$1"
    exit 1
  ;;
  *)
    site=$1
    shift
    query="$*"
    break;
  ;;
  esac
  shift
done

function fetchVideos() {
  waitnet -s || exit 1
  src=$(curl -sS "$1")
  if [[ -n $src ]]; then
    content=$(echo "$src" | pup --charset utf8 '.yt-lockup-content')

    # trouble shooting
    if [[ -z "$content" ]]; then
      channel_empty=$(echo "$src" | pup '.channel-empty-message')
      [[ -n "$channel_empty" ]] && {
        if [[ $1 = */user/* ]]; then
          printf "Bad username: %s\n" $(echo "$1" | sed -e 's/.*\/user\///' -e 's/\/videos//')
        else
          echo "Channel does not exist: $1"
        fi
        exit 1
      }
      title=$(echo "$src" | pup --charset utf8 'title text{}')
      echo "No content found: $title: $1"
      exit 1
    fi

    links=$(echo "$content" | pup --charset utf8 "div h3 a[title*=$2]" | grep -o 'href="/watch?v=[^"]*' | sed 's/href="/https:\/\/www.youtube.com/')
    #echo "$links"
    json=$(echo "$content" | pup '.yt-lockup-content json{}')
    titles=$(node -e "const json = JSON.parse(process.argv[1]);
for (let el of json) {
  const title = el.children[0].children;
  if (\"$2\" && title[0].text.indexOf(\"$2\") === -1) continue;
  //console.error(title[0].text)
  const info = el.children[1].children[0].children;
  console.log(title[0].text + ' \033[2m' + title[1].text + '\033[0m \033[37m' + info[1].text + ' \033[2m' + info[0].text + '\033[0m')
}" "$json")
    if [[ $(echo "$titles" | wc -l) != $(echo "$links" | wc -l) ]]; then
      printf "WTF-Error: %d titles, but %d links!\n" $(echo "$titles" | wc -l) $(echo "$links" | wc -l)
      echo "titles: $titles"
      echo "$links: $links"
      exit 1
    fi

    cnt=0
    IFS=$'\n'
    for title in $titles; do
      ((cnt++))
      echo "$cnt: $title"
    done

    if [[ $cnt -eq 0 ]]; then
      if [[ -n $2 ]]; then
        echo "No results found for \"$2\". Try another."
      else
        echo "No results found. Probably a script failure."
      fi
    elif [[ $cnt -eq 1 ]]; then
      printf "Only one result found. Do you want to open it? (y/n) [y]: "
      read ans
      case $ans in
        ""|j|y|J|Y|Yes)
          [[ -z $DEBUG ]] && f -i "$links" || echo "f -i $links"
        ;;
        *)
        ;;
      esac
    else
      printf "Which one do you want to open? (1-${cnt}) [1]: "
      read ans
      [[ -z "$ans" ]] && ans=1
      if [[ $ans =~ ^[0-9]+$ ]]; then
        if [[ $ans -gt 0 && $ans -le $cnt ]]; then
          result=$(echo "$links" | sed -n "${ans}p")
          [[ -z $DEBUG ]] && f "$result" || echo "f $result"
        else
          echo "Wrong answer. Integer is zero or too high: $ans."
        fi
      else
        echo "Nothing opened."
      fi
    fi
  else
    echo "Fetching from $1 failed."
  fi
}

if [[ "$site" = ${youtube}* ]]; then
  if [[ "$site" = */videos ]]; then
    fetchVideos "$site" "$query"
  else
    [[ -n "$query" ]] && echo "Warning: query [${query}] will be ignored"
    [[ -z $DEBUG ]] && f -i "$site" || echo "f -i $site"
  fi
else
  [[ -z $DEBUG ]] && f yt "$site $query" || echo "f yt $site $query"
fi
