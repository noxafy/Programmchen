#!/bin/bash

chordlong=chordpro_long.json
chordmedium=chordpro_medium.json
transpose=
long=0 # -1=short 1=medium 2=long
files=0
multipleFiles=
usage="Usage: \e[1m$(basename $0)\e[0m -h | [-s|-m|-l] [-t \e[4mN\e[0m] \e[4mchofile\e[0m \e[4m...\e[0m"
help="Compiler from chordpro/chordii files to pdf. Give a \".cho\"-file as argument (\e[4mchofile\e[0m).
$usage
	\e[1m-h\e[0m	Displays this message and exits.
	\e[1m-s\e[0m	Forces using configuration file for short lyrics (= default settings).
	\e[1m-m\e[0m	Forces using configuration file for medium lyrics.
	\e[1m-l\e[0m	Forces using configuration file for longer lyrics.
	\e[1m-t\e[0m \e[4mN\e[0m	Transpose chords by \e[4mN\e[0m semi-tones (-11 to (+)11), mirrored in resulting name.
If none of \e[1m-s\e[0m, \e[1m-m\e[0m or \e[1m-l\e[0m given, it tries automatically which is the best fitting.
"

die() {
  echo "$*"
  exit 1
}

useConfig() {
  [[ -f "$1" ]] || die "Configuration file for longer lyrics not found: $PWD/$1"
  chordpro --config="$1" -x $transpose -o "$2" "$3" || die "Failed to print pdf from $3."
}

getPageNumber() {
  open -g "$1" && sleep 1 # wait until metadata is updated
  mdls -name kMDItemNumberOfPages "$1" | cut -d " " -f 3 || die "Failed to get page number ($2) for: $1"
}

compileToPdf() {
  filename=$1
  [[ -z "$filename" ]] && die "Please give a chordpro/chordii file to compile."

  # give file names
  choFile="$filename".cho
  if [[ $transpose -eq 0 ]]; then
    pdfFile="$filename".pdf
  else
    if [[ $transpose -gt 0 && $transpose != +* ]]; then
      strtranspose="+$transpose"
    else
      strtranspose="$transpose"
    fi
    pdfFile="${filename}_$strtranspose".pdf
  fi

  if [[ $multipleFiles ]]; then
    echo "Compiling: $pdfFile"
  fi

  # create pdf dir if not existing
  if [[ ! -d pdf ]]; then
    mkdir pdf || die "Failed to create pdf/ dir."
  fi
  pdfFile=pdf/"$pdfFile"

  # try with chordpro
  if [[ -n $(which chordpro) ]]; then
    # if user desires the use of short config
    if [[ $long -eq -1 ]]; then
      echo "Using configuation file for short lyrics."
      chordpro -x $transpose -o "$pdfFile" "$choFile" || die "Failed to print pdf from $choFile."
    # if user desires the use of medium config
    elif [[ $long -eq 1 ]]; then
      echo "Using configuation file for medium lyrics."
      useConfig "$chordmedium" "$pdfFile" "$choFile" || die "Failed to print pdf from $choFile."
    # if user desires the use of long config
    elif [[ $long -eq 2 ]]; then
      echo "Using configuation file for longer lyrics."
      useConfig "$chordlong" "$pdfFile" "$choFile" || die "Failed to print pdf from $choFile."
    # else detect it self
    else # $long -eq 0
      chordpro -x $transpose -o "$pdfFile" "$choFile" || die "Failed to print pdf from $choFile."
      if [[ -n $(which mdls) ]]; then
        pagenumber=$(getPageNumber "$pdfFile" 1)
        if [[ $pagenumber -ge 2 ]]; then
          echo "Well, that lyrics seems to be a little longer. Let's try the json for long lyrics."
          useConfig "$chordlong" "$pdfFile" "$choFile"
          lpagenumber=$(getPageNumber "$pdfFile" 2)
          if [[ $lpagenumber -lt $pagenumber ]]; then
            echo "Okay, there is an improvement. But let's see if the json for medium lyrics fits even better."
            useConfig "$chordmedium" "$pdfFile" "$choFile"
            mpagenumber=$(getPageNumber "$pdfFile" 3)
            if [[ $mpagenumber -gt $lpagenumber ]]; then
              echo "That didn't work. Lyrics seem to fit better in long lyrics settings."
              useConfig "$chordlong" "$pdfFile" "$choFile"
              long=2
            else
              echo "Great!"
              long=1
            fi
          else
            echo "That didn't work. Lyrics seem to fit good in default settings."
            chordpro -x $transpose -o "$pdfFile" "$choFile" || die "Failed to print pdf from $choFile."
            long=-1
          fi
        fi
      else
        echo "Failed to read metadata from pdf: mdls not found!"
      fi
    fi
  # else try to use chordii
  else
    echo "chordpro not found. Trying with chordii..."
    chordii -x $transpose -o "$filename".ps "$choFile" || die "cho to ps conversion failed."
    pstopdf "$filename".ps "$pdfFile" || die "ps to pdf conversion failed."
    rm "$filename".ps || die "Could not remove ${filename}.ps"
  fi

  if [[ $multipleFiles ]]; then
    open -gF "$pdfFile" || die "Could not open \"$pdfFile\""
  else
    open "$pdfFile" || die "Could not open \"$pdfFile\""
  fi

  ((files++))
}

compileTransposes() {
  file=$1
  shift

  # minimum two transposes for multifile
  if [[ -n $1 && -n $2 ]]; then
    multipleFiles=true
  fi
  while [[ -n $1 ]]; do
    case $1 in
      [0-9]|[0-9][0-9]|+[0-9]|+[0-9][0-9]|-[0-9]|-[0-9][0-9])
        transpose=$1
        compileToPdf "$file"
        ;;
      *)
        echo "Invalid transpose argument: ${1}\nPlease specify a valid number of semi-tones. See -h for more help."
        ;;
    esac
    shift
  done
}

while [[ -n "$1" ]]; do
  case $1 in
  -h)
    printf "$help"
    exit 0
    ;;
  -s)
    long=-1
    ;;
  -m)
    long=1
    ;;
  -l)
    long=2
    ;;
  -t)
    case $2 in
      [0-9]|[0-9][0-9]|+[0-9]|+[0-9][0-9]|-[0-9]|-[0-9][0-9])
        transpose=$2
        ;;
      *)
        echo "Please specify a valid number of semi-tones with argument -t. See -h for more help."
        exit 1
        ;;
    esac
    shift
    ;;
  -*)
    printf "Wrong argument: %s\n$usage -- See -h for more help.\n" $1
    exit 1
    ;;
  *)
    break
    ;;
  esac
  shift
done

while [[ -n "$1" ]]; do
  if [[ -d "$1" ]]; then
    echo "$1: not a file - Please give an existing and readable chordpro file to compile."
    shift
    continue
  elif [[ ! -f "$1" ]]; then
    echo "$1: file not found - Please give an existing and readable chordpro file to compile."
    shift
    continue
  elif [[ ! -r "$1" ]]; then
    echo "$1: file not readable - Please give an existing and readable chordpro file to compile."
    shift
    continue
  fi
  if [[ "$1" != *.cho ]]; then
    printf "%s: Wrong file type! Please give a chordpro/chordii file to compile.\n" "$1"
    shift
    continue
  fi
  if [[ $files -gt 0 || -n $2 ]]; then
    multipleFiles=true
  fi
  if [[ -z $transpose ]]; then
    # detect transpose instructions
    transposes=$(cat "$1" | grep "# transpose " | sed 's/# transpose //')
    [[ -z "$transposes" ]] && transposes=0
  else
    transposes=$transpose
  fi
  compileTransposes "${1%.*}" $transposes
  shift
done

[[ $files -gt 1 ]] && echo "$files files done."
